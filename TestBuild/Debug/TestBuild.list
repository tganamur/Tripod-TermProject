
TestBuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b0  080073b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08007428  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08007428  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149a9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000288c  00000000  00000000  00034a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00038540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4f8  00000000  00000000  000396c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015669  00000000  00000000  00053bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009477e  00000000  00000000  00069229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd9a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005590  00000000  00000000  000fd9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072f0 	.word	0x080072f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080072f0 	.word	0x080072f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <_ZN6bno055C1EP17I2C_HandleTypeDef>:
 * Inputs:
 * 		I2C_HandleTypeDef* _hi2c: Pointer to i2c instance
 *
 * Initializes a new IMU object with the given inputs
 */
bno055::bno055(I2C_HandleTypeDef* _hi2c){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2250      	movs	r2, #80	; 0x50
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2214      	movs	r2, #20
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2216      	movs	r2, #22
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2218      	movs	r2, #24
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	221a      	movs	r2, #26
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	221c      	movs	r2, #28
 8000bcc:	619a      	str	r2, [r3, #24]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	221e      	movs	r2, #30
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 2020 	strb.w	r2, [r3, #32]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hi2c1 = _hi2c;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	601a      	str	r2, [r3, #0]
}
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_ZN6bno05512read_twoByteEm>:
 * Output:
 * 		int16_t data2: the combined two bytes of data from the specified two consecutive registers
 *
 * A general purpose read method that two bytes reads data from a specified registers (consecutive registers) and returns that data (two bytes of data)
 */
int16_t bno055::read_twoByte(uint32_t _IMU_reg_addr){
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af04      	add	r7, sp, #16
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read(hi2c1, IMU_Dev_addr, _IMU_reg_addr, I2C_MEMADD_SIZE_8BIT, twoByte_buf, 2, 100);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6818      	ldr	r0, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	b299      	uxth	r1, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3321      	adds	r3, #33	; 0x21
 8000c1c:	2464      	movs	r4, #100	; 0x64
 8000c1e:	9402      	str	r4, [sp, #8]
 8000c20:	2402      	movs	r4, #2
 8000c22:	9401      	str	r4, [sp, #4]
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	f002 f8c6 	bl	8002db8 <HAL_I2C_Mem_Read>
			data2 |= 0xF0000;
	}
	return data2;
*/

	int16_t data2 = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	81fb      	strh	r3, [r7, #14]
	if(twoByte_buf[1] > 0x7F){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da0b      	bge.n	8000c54 <_ZN6bno05512read_twoByteEm+0x54>
		data2 =  ((twoByte_buf[1] << 8 | twoByte_buf[0]) | 0xF0000);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	81fb      	strh	r3, [r7, #14]
 8000c52:	e00a      	b.n	8000c6a <_ZN6bno05512read_twoByteEm+0x6a>
	}else{
		data2 = ((twoByte_buf[1] << 8) | twoByte_buf[0]);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	81fb      	strh	r3, [r7, #14]
	}
	return data2;
 8000c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}

08000c76 <_ZN6bno0555writeEmPhm>:
 * 		uint8_t* _pdata_buf: Pointer to the data buffer which has data to be written into specified register
 * 		uint32_t _data_buf_size: Size of data buffer
 *
 * A general writes method that write data to a specified register from a specified data buffer
 */
void bno055::write(uint32_t _IMU_reg_addr, uint8_t* _pdata_buf, uint32_t _data_buf_size){
 8000c76:	b590      	push	{r4, r7, lr}
 8000c78:	b089      	sub	sp, #36	; 0x24
 8000c7a:	af04      	add	r7, sp, #16
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	603b      	str	r3, [r7, #0]
	HAL_I2C_Mem_Write(hi2c1, IMU_Dev_addr, _IMU_reg_addr, I2C_MEMADD_SIZE_8BIT, _pdata_buf, _data_buf_size, 100);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	2464      	movs	r4, #100	; 0x64
 8000c98:	9402      	str	r4, [sp, #8]
 8000c9a:	9301      	str	r3, [sp, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f001 ff8f 	bl	8002bc4 <HAL_I2C_Mem_Write>
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd90      	pop	{r4, r7, pc}

08000cae <_ZN6bno05510read_eul_xEv>:
/*!
 * Get x-axis euler angle data
 * Output:
 * 		int16_t eulx_data: combined MSB & LSB of x-axis euler angle data (heading)
 */
int16_t bno055::read_eul_x(){
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	//HAL_I2C_Mem_Read(hi2c1, IMU_Dev_addr, eulx_reg_addr, I2C_MEMADD_SIZE_8BIT, eulx_buf, 2, 100);
	int16_t eulx_data = read_twoByte(eulx_reg_addr);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff9f 	bl	8000c00 <_ZN6bno05512read_twoByteEm>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	81fb      	strh	r3, [r7, #14]
	//return bound(eulx_data, 0, 360);
	return eulx_data/16;
 8000cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da00      	bge.n	8000cd0 <_ZN6bno05510read_eul_xEv+0x22>
 8000cce:	330f      	adds	r3, #15
 8000cd0:	111b      	asrs	r3, r3, #4
 8000cd2:	b21b      	sxth	r3, r3
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN6bno05510read_eul_yEv>:
/*!
 * Get y-axis euler angle data
 * Output:
 * 		int16_t euly_data: combined MSB & LSB of y-axis euler angle data (roll)
 */
int16_t bno055::read_eul_y(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	//HAL_I2C_Mem_Read(hi2c1, IMU_Dev_addr, euly_reg_addr, I2C_MEMADD_SIZE_8BIT, euly_buf, 2, 100);
	int16_t euly_data = read_twoByte(euly_reg_addr);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff88 	bl	8000c00 <_ZN6bno05512read_twoByteEm>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	81fb      	strh	r3, [r7, #14]
	//return bound(euly_data, 0, 360);
	return euly_data/16;
 8000cf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da00      	bge.n	8000cfe <_ZN6bno05510read_eul_yEv+0x22>
 8000cfc:	330f      	adds	r3, #15
 8000cfe:	111b      	asrs	r3, r3, #4
 8000d00:	b21b      	sxth	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_ZN6bno05510read_eul_zEv>:
/*!
 * Get z-axis euler angle data
 * Output:
 * 		int16_t eulz_data: combined MSB & LSB of z-axis euler angle data (pitch)
 */
int16_t bno055::read_eul_z(){
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	//HAL_I2C_Mem_Read(hi2c1, IMU_Dev_addr, eulz_reg_addr, I2C_MEMADD_SIZE_8BIT, eulz_buf, 2, 100);
	int16_t eulz_data = read_twoByte(eulz_reg_addr);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4619      	mov	r1, r3
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff71 	bl	8000c00 <_ZN6bno05512read_twoByteEm>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	81fb      	strh	r3, [r7, #14]
	//return bound(eulz_data, 0, 360);
	return eulz_data/16;
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	da00      	bge.n	8000d2c <_ZN6bno05510read_eul_zEv+0x22>
 8000d2a:	330f      	adds	r3, #15
 8000d2c:	111b      	asrs	r3, r3, #4
 8000d2e:	b21b      	sxth	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b0af      	sub	sp, #188	; 0xbc
 8000d3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f001 fa25 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f8bf 	bl	8000ec4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fbdd 	bl	8001504 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8000d4a:	f000 fa6f 	bl	800122c <_ZL12MX_TIM2_Initv>
  MX_USART1_UART_Init();
 8000d4e:	f000 fb7d 	bl	800144c <_ZL19MX_USART1_UART_Initv>
  MX_SPI1_Init();
 8000d52:	f000 f95d 	bl	8001010 <_ZL12MX_SPI1_Initv>
  MX_I2C1_Init();
 8000d56:	f000 f927 	bl	8000fa8 <_ZL12MX_I2C1_Initv>
  MX_SPI2_Init();
 8000d5a:	f000 f995 	bl	8001088 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 8000d5e:	f000 f9cf 	bl	8001100 <_ZL12MX_TIM1_Initv>
  MX_USART2_UART_Init();
 8000d62:	f000 fba1 	bl	80014a8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000d66:	f000 fb13 	bl	8001390 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
/*!
 * bno055 device address and opmode register address
 * 0x08 -> data to be written into opmode reg. to configure in IMU mode
 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	484f      	ldr	r0, [pc, #316]	; (8000eac <main+0x174>)
 8000d6e:	f003 fecd 	bl	8004b0c <HAL_TIM_PWM_Start>
  uint32_t IMU_opmode_addr = 0x3D;
 8000d72:	233d      	movs	r3, #61	; 0x3d
 8000d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint8_t  IMU_mode[1] = {0x08};
 8000d78:	2308      	movs	r3, #8
 8000d7a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  char uart_buf1[128];


  //!create IMU object & associated vars
  bno055* imu;
  imu = new bno055(&hi2c1);
 8000d7e:	2024      	movs	r0, #36	; 0x24
 8000d80:	f005 fda8 	bl	80068d4 <_Znwj>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461c      	mov	r4, r3
 8000d88:	4949      	ldr	r1, [pc, #292]	; (8000eb0 <main+0x178>)
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff ff08 	bl	8000ba0 <_ZN6bno055C1EP17I2C_HandleTypeDef>
 8000d90:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  imu->write(IMU_opmode_addr, IMU_mode, 1);
 8000d94:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000d98:	2301      	movs	r3, #1
 8000d9a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8000d9e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000da2:	f7ff ff68 	bl	8000c76 <_ZN6bno0555writeEmPhm>
  int16_t eulx = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
  int16_t euly = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
  int16_t eulz = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

  //!create tmc4210 object & associated vars
  tmc4210* stepper;
  stepper = new tmc4210(&hspi1, &htim1, SPI1_CS1_Pin, EN1_Pin);
 8000db8:	2038      	movs	r0, #56	; 0x38
 8000dba:	f005 fd8b 	bl	80068d4 <_Znwj>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461c      	mov	r4, r3
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	4a38      	ldr	r2, [pc, #224]	; (8000eac <main+0x174>)
 8000dca:	493a      	ldr	r1, [pc, #232]	; (8000eb4 <main+0x17c>)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f000 ff4f 	bl	8001c70 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt>
 8000dd2:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  stepper->setup();
 8000dd6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000dda:	f001 f989 	bl	80020f0 <_ZN7tmc42105setupEv>

  tmc4210* stepper2;
  stepper2 = new tmc4210(&hspi1, &htim1, SPI1_CS2_Pin, GPIO_PIN_12);
 8000dde:	2038      	movs	r0, #56	; 0x38
 8000de0:	f005 fd78 	bl	80068d4 <_Znwj>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461c      	mov	r4, r3
 8000de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2302      	movs	r3, #2
 8000df0:	4a2e      	ldr	r2, [pc, #184]	; (8000eac <main+0x174>)
 8000df2:	4930      	ldr	r1, [pc, #192]	; (8000eb4 <main+0x17c>)
 8000df4:	4620      	mov	r0, r4
 8000df6:	f000 ff3b 	bl	8001c70 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt>
 8000dfa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  stepper2->setup();
 8000dfe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000e02:	f001 f975 	bl	80020f0 <_ZN7tmc42105setupEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int32_t pos = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int32_t pos2 = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int32_t curPos = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t duty = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Receive_IT(&huart2, (uint8_t*)recvBuf, 1);
	//HAL_UART_Receive(&huart2, recvBuf, 4, 100);
	eulx = imu->read_eul_x();
 8000e1e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000e22:	f7ff ff44 	bl	8000cae <_ZN6bno05510read_eul_xEv>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	euly = imu->read_eul_y();
 8000e2c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000e30:	f7ff ff54 	bl	8000cdc <_ZN6bno05510read_eul_yEv>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	eulz = imu->read_eul_z();
 8000e3a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000e3e:	f7ff ff64 	bl	8000d0a <_ZN6bno05510read_eul_zEv>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

	stepper->setPos(pos);
 8000e48:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000e4c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000e50:	f001 f8e6 	bl	8002020 <_ZN7tmc42106setPosEl>
	stepper2->setPos(pos2);
 8000e54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000e58:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000e5c:	f001 f8e0 	bl	8002020 <_ZN7tmc42106setPosEl>
	curPos = stepper->getPos();
 8000e60:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000e64:	f001 f914 	bl	8002090 <_ZN7tmc42106getPosEv>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	uint16_t uart_buf_len = sprintf(uart_buf1, "Heading: %d deg \r\nRoll: %d deg\r\nPitch: %d deg\r\nTest: %d\r\n\n", eulx, euly, eulz, test);
 8000e6e:	f9b7 20a6 	ldrsh.w	r2, [r7, #166]	; 0xa6
 8000e72:	f9b7 10a4 	ldrsh.w	r1, [r7, #164]	; 0xa4
 8000e76:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <main+0x180>)
 8000e7c:	7800      	ldrb	r0, [r0, #0]
 8000e7e:	4604      	mov	r4, r0
 8000e80:	1d38      	adds	r0, r7, #4
 8000e82:	9401      	str	r4, [sp, #4]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	460b      	mov	r3, r1
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <main+0x184>)
 8000e8a:	f005 feb3 	bl	8006bf4 <siprintf>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf1, uart_buf_len, 400);
 8000e94:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8000e98:	1d39      	adds	r1, r7, #4
 8000e9a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <main+0x188>)
 8000ea0:	f004 fced 	bl	800587e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000ea4:	2064      	movs	r0, #100	; 0x64
 8000ea6:	f001 f9e3 	bl	8002270 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin, GPIO_PIN_RESET);
	}
	*/


  }
 8000eaa:	e7b8      	b.n	8000e1e <main+0xe6>
 8000eac:	20000190 	.word	0x20000190
 8000eb0:	2000008c 	.word	0x2000008c
 8000eb4:	200000e0 	.word	0x200000e0
 8000eb8:	200002f8 	.word	0x200002f8
 8000ebc:	08007308 	.word	0x08007308
 8000ec0:	20000268 	.word	0x20000268

08000ec4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	2230      	movs	r2, #48	; 0x30
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f005 fd52 	bl	800697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <_Z18SystemClock_Configv+0xdc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a2b      	ldr	r2, [pc, #172]	; (8000fa0 <_Z18SystemClock_Configv+0xdc>)
 8000ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <_Z18SystemClock_Configv+0xdc>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <_Z18SystemClock_Configv+0xe0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <_Z18SystemClock_Configv+0xe0>)
 8000f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <_Z18SystemClock_Configv+0xe0>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f34:	2319      	movs	r3, #25
 8000f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f38:	23c0      	movs	r3, #192	; 0xc0
 8000f3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f40:	2304      	movs	r3, #4
 8000f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fcb7 	bl	80038bc <HAL_RCC_OscConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	bf14      	ite	ne
 8000f54:	2301      	movne	r3, #1
 8000f56:	2300      	moveq	r3, #0
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000f5e:	f000 fb55 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 ff14 	bl	8003dac <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000f94:	f000 fb3a 	bl	800160c <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3750      	adds	r7, #80	; 0x50
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <_ZL12MX_I2C1_Initv+0x60>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <_ZL12MX_I2C1_Initv+0x64>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fe6:	f001 fca9 	bl	800293c <HAL_I2C_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000ffa:	f000 fb07 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000008c 	.word	0x2000008c
 8001008:	40005400 	.word	0x40005400
 800100c:	000186a0 	.word	0x000186a0

08001010 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <_ZL12MX_SPI1_Initv+0x74>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 800103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001040:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001044:	2228      	movs	r2, #40	; 0x28
 8001046:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001054:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001056:	2200      	movs	r2, #0
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 800105c:	220a      	movs	r2, #10
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <_ZL12MX_SPI1_Initv+0x70>)
 8001062:	f003 f883 	bl	800416c <HAL_SPI_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	bf14      	ite	ne
 800106c:	2301      	movne	r3, #1
 800106e:	2300      	moveq	r3, #0
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001076:	f000 fac9 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000e0 	.word	0x200000e0
 8001084:	40013000 	.word	0x40013000

08001088 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <_ZL12MX_SPI2_Initv+0x74>)
 8001090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010bc:	2228      	movs	r2, #40	; 0x28
 80010be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010d4:	220a      	movs	r2, #10
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <_ZL12MX_SPI2_Initv+0x70>)
 80010da:	f003 f847 	bl	800416c <HAL_SPI_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80010ee:	f000 fa8d 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000138 	.word	0x20000138
 80010fc:	40003800 	.word	0x40003800

08001100 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2220      	movs	r2, #32
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fc26 	bl	800697c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001132:	4a3d      	ldr	r2, [pc, #244]	; (8001228 <_ZL12MX_TIM1_Initv+0x128>)
 8001134:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b39      	ldr	r3, [pc, #228]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4;
 8001142:	4b38      	ldr	r3, [pc, #224]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001144:	2204      	movs	r2, #4
 8001146:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800114e:	4b35      	ldr	r3, [pc, #212]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800115a:	4832      	ldr	r0, [pc, #200]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 800115c:	f003 fc87 	bl	8004a6e <HAL_TIM_PWM_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	bf14      	ite	ne
 8001166:	2301      	movne	r3, #1
 8001168:	2300      	moveq	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <_ZL12MX_TIM1_Initv+0x74>
  {
    Error_Handler();
 8001170:	f000 fa4c 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001180:	4619      	mov	r1, r3
 8001182:	4828      	ldr	r0, [pc, #160]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001184:	f004 fa6e 	bl	8005664 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <_ZL12MX_TIM1_Initv+0x9c>
  {
    Error_Handler();
 8001198:	f000 fa38 	bl	800160c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	4818      	ldr	r0, [pc, #96]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 80011c2:	f003 fdf9 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <_ZL12MX_TIM1_Initv+0xda>
  {
    Error_Handler();
 80011d6:	f000 fa19 	bl	800160c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 80011fe:	f004 fa9f 	bl	8005740 <HAL_TIMEx_ConfigBreakDeadTime>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 8001212:	f000 f9fb 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <_ZL12MX_TIM1_Initv+0x124>)
 8001218:	f000 fb76 	bl	8001908 <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3748      	adds	r7, #72	; 0x48
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000190 	.word	0x20000190
 8001228:	40010000 	.word	0x40010000

0800122c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 800125e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001264:	4b49      	ldr	r3, [pc, #292]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8001270:	4b46      	ldr	r3, [pc, #280]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001272:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001284:	4841      	ldr	r0, [pc, #260]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001286:	f003 fba3 	bl	80049d0 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800129a:	f000 f9b7 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4838      	ldr	r0, [pc, #224]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 80012ac:	f003 fe46 	bl	8004f3c <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80012c0:	f000 f9a4 	bl	800160c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c4:	4831      	ldr	r0, [pc, #196]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 80012c6:	f003 fbd2 	bl	8004a6e <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80012da:	f000 f997 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	4619      	mov	r1, r3
 80012ec:	4827      	ldr	r0, [pc, #156]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 80012ee:	f004 f9b9 	bl	8005664 <HAL_TIMEx_MasterConfigSynchronization>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf14      	ite	ne
 80012f8:	2301      	movne	r3, #1
 80012fa:	2300      	moveq	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001302:	f000 f983 	bl	800160c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001306:	2360      	movs	r3, #96	; 0x60
 8001308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 800130a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800130e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	481b      	ldr	r0, [pc, #108]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001320:	f003 fd4a 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001334:	f000 f96a 	bl	800160c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2204      	movs	r2, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4813      	ldr	r0, [pc, #76]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001340:	f003 fd3a 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf14      	ite	ne
 800134a:	2301      	movne	r3, #1
 800134c:	2300      	moveq	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 8001354:	f000 f95a 	bl	800160c <Error_Handler>
  }
  sConfigOC.Pulse = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4619      	mov	r1, r3
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 8001364:	f003 fd28 	bl	8004db8 <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	bf14      	ite	ne
 800136e:	2301      	movne	r3, #1
 8001370:	2300      	moveq	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <_ZL12MX_TIM2_Initv+0x150>
  {
    Error_Handler();
 8001378:	f000 f948 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800137c:	4803      	ldr	r0, [pc, #12]	; (800138c <_ZL12MX_TIM2_Initv+0x160>)
 800137e:	f000 fac3 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	; 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200001d8 	.word	0x200001d8

08001390 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08c      	sub	sp, #48	; 0x30
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f005 faec 	bl	800697c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013ae:	4a26      	ldr	r2, [pc, #152]	; (8001448 <_ZL12MX_TIM3_Initv+0xb8>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013b2:	4b24      	ldr	r3, [pc, #144]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ea:	2301      	movs	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	4811      	ldr	r0, [pc, #68]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 80013fe:	f003 fc35 	bl	8004c6c <HAL_TIM_Encoder_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001412:	f000 f8fb 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <_ZL12MX_TIM3_Initv+0xb4>)
 8001424:	f004 f91e 	bl	8005664 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001438:	f000 f8e8 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000220 	.word	0x20000220
 8001448:	40000400 	.word	0x40000400

0800144c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001484:	f004 f9ae 	bl	80057e4 <HAL_UART_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001498:	f000 f8b8 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000268 	.word	0x20000268
 80014a4:	40011000 	.word	0x40011000

080014a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_ZL19MX_USART2_UART_Initv+0x58>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4807      	ldr	r0, [pc, #28]	; (80014fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80014e0:	f004 f980 	bl	80057e4 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2301      	movne	r3, #1
 80014ec:	2300      	moveq	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80014f4:	f000 f88a 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002ac 	.word	0x200002ac
 8001500:	40004400 	.word	0x40004400

08001504 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b2b      	ldr	r3, [pc, #172]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b28      	ldr	r3, [pc, #160]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b21      	ldr	r3, [pc, #132]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <_ZL12MX_GPIO_Initv+0xc8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|STATUS_LED_Pin|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f649 0110 	movw	r1, #38928	; 0x9810
 8001574:	4816      	ldr	r0, [pc, #88]	; (80015d0 <_ZL12MX_GPIO_Initv+0xcc>)
 8001576:	f001 f9c7 	bl	8002908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS1_Pin|SPI1_CS2_Pin|SPI1_CS3_Pin|SPI2_CS_Pin
 800157a:	2200      	movs	r2, #0
 800157c:	f241 310f 	movw	r1, #4879	; 0x130f
 8001580:	4814      	ldr	r0, [pc, #80]	; (80015d4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001582:	f001 f9c1 	bl	8002908 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN1_Pin STATUS_LED_Pin PA12 PA15 */
  GPIO_InitStruct.Pin = EN1_Pin|STATUS_LED_Pin|GPIO_PIN_12|GPIO_PIN_15;
 8001586:	f649 0310 	movw	r3, #38928	; 0x9810
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <_ZL12MX_GPIO_Initv+0xcc>)
 80015a0:	f001 f82e 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS1_Pin SPI1_CS2_Pin SPI1_CS3_Pin SPI2_CS_Pin
                           PB3 PB8 PB9 */
  GPIO_InitStruct.Pin = SPI1_CS1_Pin|SPI1_CS2_Pin|SPI1_CS3_Pin|SPI2_CS_Pin
 80015a4:	f241 330f 	movw	r3, #4879	; 0x130f
 80015a8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <_ZL12MX_GPIO_Initv+0xd0>)
 80015be:	f001 f81f 	bl	8002600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400

080015d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvBuf, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	4907      	ldr	r1, [pc, #28]	; (8001600 <HAL_UART_RxCpltCallback+0x28>)
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <HAL_UART_RxCpltCallback+0x2c>)
 80015e6:	f004 f9dc 	bl	80059a2 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1, (uint8_t*)recvBuf, 8, 400);
 80015ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80015ee:	2208      	movs	r2, #8
 80015f0:	4903      	ldr	r1, [pc, #12]	; (8001600 <HAL_UART_RxCpltCallback+0x28>)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <HAL_UART_RxCpltCallback+0x30>)
 80015f4:	f004 f943 	bl	800587e <HAL_UART_Transmit>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200002f0 	.word	0x200002f0
 8001604:	200002ac 	.word	0x200002ac
 8001608:	20000268 	.word	0x20000268

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001610:	b672      	cpsid	i
}
 8001612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001614:	e7fe      	b.n	8001614 <Error_Handler+0x8>
	...

08001618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_I2C_MspInit+0x84>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d12b      	bne.n	80016e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a6:	23c0      	movs	r3, #192	; 0xc0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016aa:	2312      	movs	r3, #18
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b6:	2304      	movs	r3, #4
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <HAL_I2C_MspInit+0x8c>)
 80016c2:	f000 ff9d 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 80016d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_I2C_MspInit+0x88>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40005400 	.word	0x40005400
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020400 	.word	0x40020400

080016f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <HAL_SPI_MspInit+0xe8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d12c      	bne.n	8001774 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001752:	23e0      	movs	r3, #224	; 0xe0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001762:	2305      	movs	r3, #5
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	481e      	ldr	r0, [pc, #120]	; (80017e8 <HAL_SPI_MspInit+0xf0>)
 800176e:	f000 ff47 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001772:	e031      	b.n	80017d8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_SPI_MspInit+0xf4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12c      	bne.n	80017d8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <HAL_SPI_MspInit+0xec>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017c8:	2305      	movs	r3, #5
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <HAL_SPI_MspInit+0xf8>)
 80017d4:	f000 ff14 	bl	8002600 <HAL_GPIO_Init>
}
 80017d8:	bf00      	nop
 80017da:	3730      	adds	r7, #48	; 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013000 	.word	0x40013000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40003800 	.word	0x40003800
 80017f0:	40020400 	.word	0x40020400

080017f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_TIM_PWM_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10d      	bne.n	8001822 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_TIM_PWM_MspInit+0x40>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_TIM_PWM_MspInit+0x40>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_TIM_PWM_MspInit+0x40>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40010000 	.word	0x40010000
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d10d      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_TIM_Base_MspInit+0x3c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_TIM_Base_MspInit+0x3c>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_TIM_Base_MspInit+0x3c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	; (80018fc <HAL_TIM_Encoder_MspInit+0x84>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12b      	bne.n	80018f2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_TIM_Encoder_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_TIM_Encoder_MspInit+0x88>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_TIM_Encoder_MspInit+0x88>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_TIM_Encoder_MspInit+0x88>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_TIM_Encoder_MspInit+0x88>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_TIM_Encoder_MspInit+0x88>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018d2:	2330      	movs	r3, #48	; 0x30
 80018d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	2302      	movs	r3, #2
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018ee:	f000 fe87 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40000400 	.word	0x40000400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020400 	.word	0x40020400

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a34      	ldr	r2, [pc, #208]	; (80019f8 <HAL_TIM_MspPostInit+0xf0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d11f      	bne.n	800196a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a32      	ldr	r2, [pc, #200]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001958:	2301      	movs	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4827      	ldr	r0, [pc, #156]	; (8001a00 <HAL_TIM_MspPostInit+0xf8>)
 8001964:	f000 fe4c 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001968:	e041      	b.n	80019ee <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001972:	d13c      	bne.n	80019ee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 800199a:	f043 0302 	orr.w	r3, r3, #2
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b16      	ldr	r3, [pc, #88]	; (80019fc <HAL_TIM_MspPostInit+0xf4>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ac:	2303      	movs	r3, #3
 80019ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	480e      	ldr	r0, [pc, #56]	; (8001a00 <HAL_TIM_MspPostInit+0xf8>)
 80019c8:	f000 fe1a 	bl	8002600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019de:	2301      	movs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4806      	ldr	r0, [pc, #24]	; (8001a04 <HAL_TIM_MspPostInit+0xfc>)
 80019ea:	f000 fe09 	bl	8002600 <HAL_GPIO_Init>
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40010000 	.word	0x40010000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d135      	bne.n	8001a96 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a38      	ldr	r2, [pc, #224]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a74:	2307      	movs	r3, #7
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <HAL_UART_MspInit+0x110>)
 8001a80:	f000 fdbe 	bl	8002600 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2025      	movs	r0, #37	; 0x25
 8001a8a:	f000 fcf0 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8e:	2025      	movs	r0, #37	; 0x25
 8001a90:	f000 fd09 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a94:	e038      	b.n	8001b08 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_UART_MspInit+0x114>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d133      	bne.n	8001b08 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <HAL_UART_MspInit+0x110>)
 8001af4:	f000 fd84 	bl	8002600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2026      	movs	r0, #38	; 0x26
 8001afe:	f000 fcb6 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b02:	2026      	movs	r0, #38	; 0x26
 8001b04:	f000 fccf 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001b08:	bf00      	nop
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40011000 	.word	0x40011000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40004400 	.word	0x40004400

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6c:	f000 fb60 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART1_IRQHandler+0x10>)
 8001b7a:	f003 ff43 	bl	8005a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000268 	.word	0x20000268

08001b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <USART2_IRQHandler+0x10>)
 8001b8e:	f003 ff39 	bl	8005a04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200002ac 	.word	0x200002ac

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb6:	f004 feaf 	bl	8006918 <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bde:	e7fe      	b.n	8001bde <_exit+0x12>

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f004 fe82 	bl	8006918 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20020000 	.word	0x20020000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	200002fc 	.word	0x200002fc
 8001c48:	20000318 	.word	0x20000318

08001c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt>:
 * 		TIM_HandleType* _htim: Pointer to timer
 * 		uint16_t _CS: Chip select pin
 * 		uint16_t _EN: Enable pin
 * Initializes new TMC4210 object with the given inputs
 */
tmc4210::tmc4210(SPI_HandleTypeDef* _hspi, TIM_HandleTypeDef* _htim, uint16_t _CS, uint16_t _EN){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	807b      	strh	r3, [r7, #2]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	811a      	strh	r2, [r3, #8]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	815a      	strh	r2, [r3, #10]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xc4>)
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xc8>)
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xcc>)
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	615a      	str	r2, [r3, #20]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xd0>)
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	619a      	str	r2, [r3, #24]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a25      	ldr	r2, [pc, #148]	; (8001d44 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xd4>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	61da      	str	r2, [r3, #28]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xd8>)
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	621a      	str	r2, [r3, #32]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2214      	movs	r2, #20
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2273      	movs	r2, #115	; 0x73
 8001d00:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hspi = _hspi;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	601a      	str	r2, [r3, #0]
	htim = _htim;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]
	CS = _CS;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	815a      	strh	r2, [r3, #10]
	EN = _EN;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8b3a      	ldrh	r2, [r7, #24]
 8001d1a:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, EN, GPIO_PIN_RESET);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	891b      	ldrh	r3, [r3, #8]
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <_ZN7tmc4210C1EP19__SPI_HandleTypeDefP17TIM_HandleTypeDeftt+0xdc>)
 8001d26:	f000 fdef 	bl	8002908 <HAL_GPIO_WritePin>
}
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08007344 	.word	0x08007344
 8001d38:	08007348 	.word	0x08007348
 8001d3c:	0800734c 	.word	0x0800734c
 8001d40:	08007350 	.word	0x08007350
 8001d44:	08007354 	.word	0x08007354
 8001d48:	08007358 	.word	0x08007358
 8001d4c:	40020000 	.word	0x40020000

08001d50 <_ZN7tmc42104sendEm>:
 * 		uint8_t* _tdata_buf: Pointer to data buffer with info to be transmitted
 * 		uint16_t size: Size of the above data buffer
 * 		uint32_t timeout: Timeout (milliseconds)
 * A general send method that sends a specified data buffer of a specified size to the tmc4210 object
 */
void tmc4210::send(uint32_t sendMode){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	if(sendMode == 0){
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d11c      	bne.n	8001d9a <_ZN7tmc42104sendEm+0x4a>
		transmit_buf[0] = pos_buf[0];
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = pos_buf[1];
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = pos_buf[2];
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = pos_buf[3];
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f993 3033 	ldrsb.w	r3, [r3, #51]	; 0x33
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001d98:	e0ae      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 1){
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d114      	bne.n	8001dca <_ZN7tmc42104sendEm+0x7a>
		transmit_buf[0] = en_sd_buf[0];
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7b1a      	ldrb	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = en_sd_buf[1];
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7b5a      	ldrb	r2, [r3, #13]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = en_sd_buf[2];
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7b9a      	ldrb	r2, [r3, #14]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = en_sd_buf[3];
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7bda      	ldrb	r2, [r3, #15]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001dc8:	e096      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 2){
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d114      	bne.n	8001dfa <_ZN7tmc42104sendEm+0xaa>
		transmit_buf[0] = vmax_buf[0];
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7c1a      	ldrb	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = vmax_buf[1];
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7c5a      	ldrb	r2, [r3, #17]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = vmax_buf[2];
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7c9a      	ldrb	r2, [r3, #18]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = vmax_buf[3];
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7cda      	ldrb	r2, [r3, #19]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001df8:	e07e      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 3){
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d114      	bne.n	8001e2a <_ZN7tmc42104sendEm+0xda>
		transmit_buf[0] = vmin_buf[0];
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	7d1a      	ldrb	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = vmin_buf[1];
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7d5a      	ldrb	r2, [r3, #21]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = vmin_buf[2];
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7d9a      	ldrb	r2, [r3, #22]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = vmin_buf[3];
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7dda      	ldrb	r2, [r3, #23]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001e28:	e066      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 4){
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d114      	bne.n	8001e5a <_ZN7tmc42104sendEm+0x10a>
		transmit_buf[0] = prdiv_buf[0];
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e1a      	ldrb	r2, [r3, #24]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = prdiv_buf[1];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7e5a      	ldrb	r2, [r3, #25]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = prdiv_buf[2];
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e9a      	ldrb	r2, [r3, #26]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = prdiv_buf[3];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7eda      	ldrb	r2, [r3, #27]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001e58:	e04e      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 5){
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d114      	bne.n	8001e8a <_ZN7tmc42104sendEm+0x13a>
		transmit_buf[0] = amax_buf[0];
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7f1a      	ldrb	r2, [r3, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = amax_buf[1];
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7f5a      	ldrb	r2, [r3, #29]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = amax_buf[2];
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7f9a      	ldrb	r2, [r3, #30]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = amax_buf[3];
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	7fda      	ldrb	r2, [r3, #31]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001e88:	e036      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 6){
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	d118      	bne.n	8001ec2 <_ZN7tmc42104sendEm+0x172>
		transmit_buf[0] = pmuldiv_buf[0];
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = pmuldiv_buf[1];
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = pmuldiv_buf[2];
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = pmuldiv_buf[3];
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001ec0:	e01a      	b.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
	}else if(sendMode == 7){
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	d117      	bne.n	8001ef8 <_ZN7tmc42104sendEm+0x1a8>
		transmit_buf[0] = ramp_buf[0];
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = ramp_buf[1];
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = ramp_buf[2];
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = ramp_buf[3];
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_RESET);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	895b      	ldrh	r3, [r3, #10]
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <_ZN7tmc42104sendEm+0x1e0>)
 8001f02:	f000 fd01 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, transmit_buf, 4, 100);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001f10:	2364      	movs	r3, #100	; 0x64
 8001f12:	2204      	movs	r2, #4
 8001f14:	f002 f9b3 	bl	800427e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	895b      	ldrh	r3, [r3, #10]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4803      	ldr	r0, [pc, #12]	; (8001f30 <_ZN7tmc42104sendEm+0x1e0>)
 8001f22:	f000 fcf1 	bl	8002908 <HAL_GPIO_WritePin>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40020400 	.word	0x40020400

08001f34 <_ZN7tmc42107recieveEm>:
 * 		uint32_t timeout: Timeout (milliseconds)
 * Outputs:
 * 		uint32_t value: value of the register that was read
 * A general receive method that reads from the tmc4210 and returns that value
 */
uint32_t tmc4210::recieve(uint32_t recvMode){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	if(recvMode == 1){
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d112      	bne.n	8001f6a <_ZN7tmc42107recieveEm+0x36>
		transmit_buf[0] = xPos_addr[0];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = 0x00;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = 0x00;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = 0x00;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001f68:	e02a      	b.n	8001fc0 <_ZN7tmc42107recieveEm+0x8c>
	}else if(recvMode == 2){
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d112      	bne.n	8001f96 <_ZN7tmc42107recieveEm+0x62>
		transmit_buf[0] = vmax_addr[0];
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = 0x00;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = 0x00;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = 0x00;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001f94:	e014      	b.n	8001fc0 <_ZN7tmc42107recieveEm+0x8c>
	}else if(recvMode == 3){
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d111      	bne.n	8001fc0 <_ZN7tmc42107recieveEm+0x8c>
		transmit_buf[0] = typeReg_addr[0];
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		transmit_buf[1] = 0x00;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		transmit_buf[2] = 0x00;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		transmit_buf[3] = 0x00;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}
	HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_RESET);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	895b      	ldrh	r3, [r3, #10]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4814      	ldr	r0, [pc, #80]	; (800201c <_ZN7tmc42107recieveEm+0xe8>)
 8001fca:	f000 fc9d 	bl	8002908 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, transmit_buf, recieve_buf, 4, 100);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001fde:	2364      	movs	r3, #100	; 0x64
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	f002 fa87 	bl	80044f6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, CS, GPIO_PIN_SET);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	895b      	ldrh	r3, [r3, #10]
 8001fec:	2201      	movs	r2, #1
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <_ZN7tmc42107recieveEm+0xe8>)
 8001ff2:	f000 fc89 	bl	8002908 <HAL_GPIO_WritePin>
	recieve_buf[2] = recieve_buf[1];
	recieve_buf[1] = recieve_buf[0];
	recieve_buf[0] = 0x00;
	*/

	uint32_t value = (uint32_t)(recieve_buf[1] << 16 | recieve_buf[2] << 8 | recieve_buf[3]);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001ffc:	041a      	lsls	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	4313      	orrs	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
	return value;
 8002012:	68fb      	ldr	r3, [r7, #12]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40020400 	.word	0x40020400

08002020 <_ZN7tmc42106setPosEl>:
 * Inputs:
 * 		uint32_t pos: Desired set position in degrees
 * The setPos method takes in a desired position in degrees and converts that to microsteps. The microsteps are
 * converted to a 3-byte buffer and transmitted to the tmc4210 object via SPI.
 */
void tmc4210::setPos(int32_t pos){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
	int32_t microsteps = (0.5556)*8*pos;
 800202a:	6838      	ldr	r0, [r7, #0]
 800202c:	f7fe fba4 	bl	8000778 <__aeabi_i2d>
 8002030:	a315      	add	r3, pc, #84	; (adr r3, 8002088 <_ZN7tmc42106setPosEl+0x68>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe f923 	bl	8000280 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fc03 	bl	800084c <__aeabi_d2iz>
 8002046:	4603      	mov	r3, r0
 8002048:	60fb      	str	r3, [r7, #12]
	pos_buf[0] = 0x00;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	pos_buf[1] = (microsteps >> 16);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	141b      	asrs	r3, r3, #16
 8002056:	b25a      	sxtb	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	pos_buf[2] = (microsteps >> 8);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	121b      	asrs	r3, r3, #8
 8002062:	b25a      	sxtb	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	pos_buf[3] = (microsteps >> 0);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	b25a      	sxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	this->send(0);
 8002074:	2100      	movs	r1, #0
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fe6a 	bl	8001d50 <_ZN7tmc42104sendEm>
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	f3af 8000 	nop.w
 8002088:	a6b50b0f 	.word	0xa6b50b0f
 800208c:	4011c779 	.word	0x4011c779

08002090 <_ZN7tmc42106getPosEv>:
 * Outputs:
 * 		uint32_t currentPos: current postion that the tmc4210 object is at
 * The getPos method returns the current postion of the stepper motor that the tmc4210 object has access to.
 * The returned value is in degrees.
 */
uint32_t tmc4210::getPos(){
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	int32_t microsteps = this->recieve(1);
 8002098:	2101      	movs	r1, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff4a 	bl	8001f34 <_ZN7tmc42107recieveEm>
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
	int32_t currentPos = microsteps*(0.125)*(1.8);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7fe fb67 	bl	8000778 <__aeabi_i2d>
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80020b2:	f7fe f8e5 	bl	8000280 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	a30a      	add	r3, pc, #40	; (adr r3, 80020e8 <_ZN7tmc42106getPosEv+0x58>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe f8dc 	bl	8000280 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7fe fbbc 	bl	800084c <__aeabi_d2iz>
 80020d4:	4603      	mov	r3, r0
 80020d6:	60bb      	str	r3, [r7, #8]
	return currentPos;
 80020d8:	68bb      	ldr	r3, [r7, #8]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	cccccccd 	.word	0xcccccccd
 80020ec:	3ffccccc 	.word	0x3ffccccc

080020f0 <_ZN7tmc42105setupEv>:

/*!
 * Implementation of the setup method
 * This method sends the appropriate data to the appropriate registers to configure/setup the tmc4210
 */
void tmc4210::setup(){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	this->send(1);		//! Set en_sd to 1 to enable the Step/Dir interface to the driver IC
 80020f8:	2101      	movs	r1, #1
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fe28 	bl	8001d50 <_ZN7tmc42104sendEm>
	this->send(2);		//! Set the velocity parameter V_MAX
 8002100:	2102      	movs	r1, #2
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fe24 	bl	8001d50 <_ZN7tmc42104sendEm>
	this->send(3);		//! Set the velocity parameter V_MIN
 8002108:	2103      	movs	r1, #3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fe20 	bl	8001d50 <_ZN7tmc42104sendEm>
	this->send(4);  	//! Set the clock pre-dividers PULSE_DIV and RAMP_DIV
 8002110:	2104      	movs	r1, #4
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fe1c 	bl	8001d50 <_ZN7tmc42104sendEm>
	this->send(5);   	//! Set A_MAX with a valid pair of PMUL and PDIV
 8002118:	2105      	movs	r1, #5
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe18 	bl	8001d50 <_ZN7tmc42104sendEm>
	this->send(6);		//! Valid pair of PMUL and PDIV
 8002120:	2106      	movs	r1, #6
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fe14 	bl	8001d50 <_ZN7tmc42104sendEm>
	this->send(7);      //! Choose the ramp mode with RAMP_MODE register
 8002128:	2107      	movs	r1, #7
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fe10 	bl	8001d50 <_ZN7tmc42104sendEm>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002170 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800213e:	490e      	ldr	r1, [pc, #56]	; (8002178 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002154:	4c0b      	ldr	r4, [pc, #44]	; (8002184 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002162:	f7ff fd73 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002166:	f004 fbdd 	bl	8006924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216a:	f7fe fde5 	bl	8000d38 <main>
  bx  lr    
 800216e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800217c:	080073b8 	.word	0x080073b8
  ldr r2, =_sbss
 8002180:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002184:	20000318 	.word	0x20000318

08002188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <HAL_Init+0x40>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800219a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <HAL_Init+0x40>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_Init+0x40>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f94f 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 f808 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7ff fa2a 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f967 	bl	80024c2 <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 f92f 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000000 	.word	0x20000000
 8002228:	20000008 	.word	0x20000008
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_IncTick+0x20>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_IncTick+0x24>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_IncTick+0x24>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000008 	.word	0x20000008
 8002254:	20000300 	.word	0x20000300

08002258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_GetTick+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000300 	.word	0x20000300

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff ffee 	bl	8002258 <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_Delay+0x44>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffde 	bl	8002258 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	; (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	; (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	; 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff8e 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff29 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff3e 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff8e 	bl	80023ac <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff31 	bl	800231c <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff feb6 	bl	8002258 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d008      	beq.n	800250c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e052      	b.n	80025b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0216 	bic.w	r2, r2, #22
 800251a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800252a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_DMA_Abort+0x62>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0208 	bic.w	r2, r2, #8
 800254a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255c:	e013      	b.n	8002586 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800255e:	f7ff fe7b 	bl	8002258 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b05      	cmp	r3, #5
 800256a:	d90c      	bls.n	8002586 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2203      	movs	r2, #3
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e015      	b.n	80025b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e4      	bne.n	800255e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	223f      	movs	r2, #63	; 0x3f
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e00c      	b.n	80025f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2205      	movs	r2, #5
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e159      	b.n	80028d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8148 	bne.w	80028ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a2 	beq.w	80028ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_GPIO_Init+0x2ec>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <HAL_GPIO_Init+0x2f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x202>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_GPIO_Init+0x2f4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x1fe>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a47      	ldr	r2, [pc, #284]	; (80028f8 <HAL_GPIO_Init+0x2f8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x1fa>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a46      	ldr	r2, [pc, #280]	; (80028fc <HAL_GPIO_Init+0x2fc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x1f6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a45      	ldr	r2, [pc, #276]	; (8002900 <HAL_GPIO_Init+0x300>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x1f2>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027f2:	2307      	movs	r3, #7
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x204>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x2ec>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002846:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_GPIO_Init+0x304>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_GPIO_Init+0x304>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f aea2 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
 8002914:	4613      	mov	r3, r2
 8002916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002918:	787b      	ldrb	r3, [r7, #1]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002924:	e003      	b.n	800292e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	041a      	lsls	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e12b      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fe80 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800298e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800299e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a0:	f001 fbbc 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 80029a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a81      	ldr	r2, [pc, #516]	; (8002bb0 <HAL_I2C_Init+0x274>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d807      	bhi.n	80029c0 <HAL_I2C_Init+0x84>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_I2C_Init+0x278>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	bf94      	ite	ls
 80029b8:	2301      	movls	r3, #1
 80029ba:	2300      	movhi	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e006      	b.n	80029ce <HAL_I2C_Init+0x92>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a7d      	ldr	r2, [pc, #500]	; (8002bb8 <HAL_I2C_Init+0x27c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	bf94      	ite	ls
 80029c8:	2301      	movls	r3, #1
 80029ca:	2300      	movhi	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e0e7      	b.n	8002ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <HAL_I2C_Init+0x280>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0c9b      	lsrs	r3, r3, #18
 80029e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a6a      	ldr	r2, [pc, #424]	; (8002bb0 <HAL_I2C_Init+0x274>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d802      	bhi.n	8002a10 <HAL_I2C_Init+0xd4>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	e009      	b.n	8002a24 <HAL_I2C_Init+0xe8>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_I2C_Init+0x284>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	3301      	adds	r3, #1
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	495c      	ldr	r1, [pc, #368]	; (8002bb0 <HAL_I2C_Init+0x274>)
 8002a40:	428b      	cmp	r3, r1
 8002a42:	d819      	bhi.n	8002a78 <HAL_I2C_Init+0x13c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e59      	subs	r1, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a52:	1c59      	adds	r1, r3, #1
 8002a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a58:	400b      	ands	r3, r1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_I2C_Init+0x138>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e59      	subs	r1, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a72:	e051      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e04f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <HAL_I2C_Init+0x168>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1e58      	subs	r0, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e012      	b.n	8002aca <HAL_I2C_Init+0x18e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1e58      	subs	r0, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6859      	ldr	r1, [r3, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	0099      	lsls	r1, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	3301      	adds	r3, #1
 8002abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf0c      	ite	eq
 8002ac4:	2301      	moveq	r3, #1
 8002ac6:	2300      	movne	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x196>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e022      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10e      	bne.n	8002af8 <HAL_I2C_Init+0x1bc>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e58      	subs	r0, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6859      	ldr	r1, [r3, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	440b      	add	r3, r1
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	3301      	adds	r3, #1
 8002aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af6:	e00f      	b.n	8002b18 <HAL_I2C_Init+0x1dc>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6859      	ldr	r1, [r3, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	0099      	lsls	r1, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	6809      	ldr	r1, [r1, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6911      	ldr	r1, [r2, #16]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	000186a0 	.word	0x000186a0
 8002bb4:	001e847f 	.word	0x001e847f
 8002bb8:	003d08ff 	.word	0x003d08ff
 8002bbc:	431bde83 	.word	0x431bde83
 8002bc0:	10624dd3 	.word	0x10624dd3

08002bc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	813b      	strh	r3, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bde:	f7ff fb3b 	bl	8002258 <HAL_GetTick>
 8002be2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	f040 80d9 	bne.w	8002da4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	2319      	movs	r3, #25
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	496d      	ldr	r1, [pc, #436]	; (8002db0 <HAL_I2C_Mem_Write+0x1ec>)
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fc7f 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e0cc      	b.n	8002da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_I2C_Mem_Write+0x56>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0c5      	b.n	8002da6 <HAL_I2C_Mem_Write+0x1e2>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d007      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2221      	movs	r2, #33	; 0x21
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a4d      	ldr	r2, [pc, #308]	; (8002db4 <HAL_I2C_Mem_Write+0x1f0>)
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c82:	88f8      	ldrh	r0, [r7, #6]
 8002c84:	893a      	ldrh	r2, [r7, #8]
 8002c86:	8979      	ldrh	r1, [r7, #10]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	4603      	mov	r3, r0
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fab6 	bl	8003204 <I2C_RequestMemoryWrite>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d052      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e081      	b.n	8002da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fd00 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d107      	bne.n	8002cca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06b      	b.n	8002da6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	781a      	ldrb	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d11b      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x180>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d017      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	781a      	ldrb	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1aa      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fcec 	bl	800372e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e016      	b.n	8002da6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	00100002 	.word	0x00100002
 8002db4:	ffff0000 	.word	0xffff0000

08002db8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	; 0x30
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	813b      	strh	r3, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd2:	f7ff fa41 	bl	8002258 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	f040 8208 	bne.w	80031f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2319      	movs	r3, #25
 8002dec:	2201      	movs	r2, #1
 8002dee:	497b      	ldr	r1, [pc, #492]	; (8002fdc <HAL_I2C_Mem_Read+0x224>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fb85 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e1fb      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Mem_Read+0x56>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e1f4      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d007      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2222      	movs	r2, #34	; 0x22
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2240      	movs	r2, #64	; 0x40
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_I2C_Mem_Read+0x228>)
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e76:	88f8      	ldrh	r0, [r7, #6]
 8002e78:	893a      	ldrh	r2, [r7, #8]
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4603      	mov	r3, r0
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fa52 	bl	8003330 <I2C_RequestMemoryRead>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1b0      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d113      	bne.n	8002ec6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	623b      	str	r3, [r7, #32]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e184      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d11b      	bne.n	8002f06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e164      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d11b      	bne.n	8002f46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	e144      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f5c:	e138      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	f200 80f1 	bhi.w	800314a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d123      	bne.n	8002fb8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fc1b 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e139      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb6:	e10b      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d14e      	bne.n	800305e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	4906      	ldr	r1, [pc, #24]	; (8002fe4 <HAL_I2C_Mem_Read+0x22c>)
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fa98 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e10e      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
 8002fda:	bf00      	nop
 8002fdc:	00100002 	.word	0x00100002
 8002fe0:	ffff0000 	.word	0xffff0000
 8002fe4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800305c:	e0b8      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	2200      	movs	r2, #0
 8003066:	4966      	ldr	r1, [pc, #408]	; (8003200 <HAL_I2C_Mem_Read+0x448>)
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa49 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0bf      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	2200      	movs	r2, #0
 80030c2:	494f      	ldr	r1, [pc, #316]	; (8003200 <HAL_I2C_Mem_Read+0x448>)
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fa1b 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e091      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003148:	e042      	b.n	80031d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fb2e 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e04c      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d118      	bne.n	80031d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f aec2 	bne.w	8002f5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3728      	adds	r7, #40	; 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	00010004 	.word	0x00010004

08003204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	817b      	strh	r3, [r7, #10]
 8003216:	460b      	mov	r3, r1
 8003218:	813b      	strh	r3, [r7, #8]
 800321a:	4613      	mov	r3, r2
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2200      	movs	r2, #0
 8003236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f960 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d103      	bne.n	800325e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e05f      	b.n	8003322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	492d      	ldr	r1, [pc, #180]	; (800332c <I2C_RequestMemoryWrite+0x128>)
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f998 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e04c      	b.n	8003322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	6a39      	ldr	r1, [r7, #32]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa02 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d107      	bne.n	80032c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e02b      	b.n	8003322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e021      	b.n	8003320 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	6a39      	ldr	r1, [r7, #32]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f9dc 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d107      	bne.n	8003312 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e005      	b.n	8003322 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003316:	893b      	ldrh	r3, [r7, #8]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	00010002 	.word	0x00010002

08003330 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	460b      	mov	r3, r1
 8003344:	813b      	strh	r3, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003358:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003368:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2200      	movs	r2, #0
 8003372:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8c2 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003390:	d103      	bne.n	800339a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0aa      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	4952      	ldr	r1, [pc, #328]	; (80034fc <I2C_RequestMemoryRead+0x1cc>)
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f8fa 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e097      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f964 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00d      	beq.n	8003406 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d107      	bne.n	8003402 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003400:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e076      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d105      	bne.n	8003418 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800340c:	893b      	ldrh	r3, [r7, #8]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	e021      	b.n	800345c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003418:	893b      	ldrh	r3, [r7, #8]
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b29b      	uxth	r3, r3
 800341e:	b2da      	uxtb	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 f93e 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	2b04      	cmp	r3, #4
 800343c:	d107      	bne.n	800344e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e050      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003452:	893b      	ldrh	r3, [r7, #8]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345e:	6a39      	ldr	r1, [r7, #32]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f923 	bl	80036ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b04      	cmp	r3, #4
 8003472:	d107      	bne.n	8003484 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003482:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e035      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003496:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2200      	movs	r2, #0
 80034a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f82b 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034be:	d103      	bne.n	80034c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e013      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034cc:	897b      	ldrh	r3, [r7, #10]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	6a3a      	ldr	r2, [r7, #32]
 80034e0:	4906      	ldr	r1, [pc, #24]	; (80034fc <I2C_RequestMemoryRead+0x1cc>)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f863 	bl	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	00010002 	.word	0x00010002

08003500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003510:	e025      	b.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d021      	beq.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe fe9d 	bl	8002258 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d116      	bne.n	800355e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e023      	b.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0c1b      	lsrs	r3, r3, #16
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d10d      	bne.n	8003584 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	e00c      	b.n	800359e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4013      	ands	r3, r2
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf0c      	ite	eq
 8003596:	2301      	moveq	r3, #1
 8003598:	2300      	movne	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d0b6      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035bc:	e051      	b.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d123      	bne.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e046      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d021      	beq.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fe fe1b 	bl	8002258 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0220 	orr.w	r2, r3, #32
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e020      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e00b      	b.n	800369e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d18d      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036b8:	e02d      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f8ce 	bl	800385c <I2C_IsAcknowledgeFailed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e02d      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d021      	beq.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7fe fdc1 	bl	8002258 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b80      	cmp	r3, #128	; 0x80
 8003722:	d1ca      	bne.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800373a:	e02d      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f88d 	bl	800385c <I2C_IsAcknowledgeFailed>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e02d      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d021      	beq.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003754:	f7fe fd80 	bl	8002258 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d116      	bne.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d1ca      	bne.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037bc:	e042      	b.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d119      	bne.n	8003800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0210 	mvn.w	r2, #16
 80037d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e029      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7fe fd2a 	bl	8002258 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e007      	b.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d1b5      	bne.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003872:	d11b      	bne.n	80038ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800387c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e267      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d075      	beq.n	80039c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d00c      	beq.n	8003900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e6:	4b85      	ldr	r3, [pc, #532]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d112      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b82      	ldr	r3, [pc, #520]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fe:	d10b      	bne.n	8003918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05b      	beq.n	80039c4 <HAL_RCC_OscConfig+0x108>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d157      	bne.n	80039c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e242      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x74>
 8003922:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a75      	ldr	r2, [pc, #468]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	e01d      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x98>
 800393a:	4b70      	ldr	r3, [pc, #448]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6f      	ldr	r2, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b6d      	ldr	r3, [pc, #436]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6c      	ldr	r2, [pc, #432]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0xb0>
 8003954:	4b69      	ldr	r3, [pc, #420]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fe fc70 	bl	8002258 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397c:	f7fe fc6c 	bl	8002258 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	; 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e207      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0xc0>
 800399a:	e014      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399c:	f7fe fc5c 	bl	8002258 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fc58 	bl	8002258 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e1f3      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0xe8>
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d063      	beq.n	8003a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d11c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d116      	bne.n	8003a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e1c7      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4937      	ldr	r1, [pc, #220]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a22:	e03a      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7fe fc11 	bl	8002258 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fe fc0d 	bl	8002258 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e1a8      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4925      	ldr	r1, [pc, #148]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCC_OscConfig+0x244>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe fbf0 	bl	8002258 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7c:	f7fe fbec 	bl	8002258 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e187      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d036      	beq.n	8003b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d016      	beq.n	8003adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fbd0 	bl	8002258 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fe fbcc 	bl	8002258 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e167      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ace:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_OscConfig+0x240>)
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x200>
 8003ada:	e01b      	b.n	8003b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_RCC_OscConfig+0x248>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fbb9 	bl	8002258 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	e00e      	b.n	8003b08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aea:	f7fe fbb5 	bl	8002258 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d907      	bls.n	8003b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e150      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	42470000 	.word	0x42470000
 8003b04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b08:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ea      	bne.n	8003aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8097 	beq.w	8003c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b26:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	4b7d      	ldr	r3, [pc, #500]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a7c      	ldr	r2, [pc, #496]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b7a      	ldr	r3, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b52:	4b77      	ldr	r3, [pc, #476]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d118      	bne.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5e:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a73      	ldr	r2, [pc, #460]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6a:	f7fe fb75 	bl	8002258 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fe fb71 	bl	8002258 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e10c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <HAL_RCC_OscConfig+0x474>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x2ea>
 8003b98:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9c:	4a63      	ldr	r2, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba4:	e01c      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x30c>
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a5e      	ldr	r2, [pc, #376]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0x324>
 8003bc8:	4b58      	ldr	r3, [pc, #352]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a57      	ldr	r2, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	4b55      	ldr	r3, [pc, #340]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a54      	ldr	r2, [pc, #336]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7fe fb36 	bl	8002258 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fb32 	bl	8002258 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0cb      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	4b49      	ldr	r3, [pc, #292]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0ee      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x334>
 8003c12:	e014      	b.n	8003c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c14:	f7fe fb20 	bl	8002258 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fb1c 	bl	8002258 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0b5      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c32:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1ee      	bne.n	8003c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80a1 	beq.w	8003d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d05c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d141      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6e:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe faf0 	bl	8002258 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fe faec 	bl	8002258 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e087      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	041b      	lsls	r3, r3, #16
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	491b      	ldr	r1, [pc, #108]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fe fac5 	bl	8002258 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fac1 	bl	8002258 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e05c      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x416>
 8003cf0:	e054      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <HAL_RCC_OscConfig+0x478>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe faae 	bl	8002258 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fe faaa 	bl	8002258 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e045      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_RCC_OscConfig+0x470>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x444>
 8003d1e:	e03d      	b.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e038      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x4ec>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d028      	beq.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d121      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d11a      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d68:	4013      	ands	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	3b01      	subs	r3, #1
 8003d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800

08003dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0cc      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d90c      	bls.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b63      	ldr	r3, [pc, #396]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0b8      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a52      	ldr	r2, [pc, #328]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	494d      	ldr	r1, [pc, #308]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d044      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d119      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d003      	beq.n	8003e6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e06f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e067      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b37      	ldr	r3, [pc, #220]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4934      	ldr	r1, [pc, #208]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fe f9dc 	bl	8002258 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fe f9d8 	bl	8002258 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e04f      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d20c      	bcs.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b20      	ldr	r3, [pc, #128]	; (8003f64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e032      	b.n	8003f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f00:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4916      	ldr	r1, [pc, #88]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1e:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	490e      	ldr	r1, [pc, #56]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f32:	f000 f821 	bl	8003f78 <HAL_RCC_GetSysClockFreq>
 8003f36:	4602      	mov	r2, r0
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	490a      	ldr	r1, [pc, #40]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003f44:	5ccb      	ldrb	r3, [r1, r3]
 8003f46:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe f93c 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023c00 	.word	0x40023c00
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	0800735c 	.word	0x0800735c
 8003f70:	20000000 	.word	0x20000000
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b090      	sub	sp, #64	; 0x40
 8003f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
 8003f84:	2300      	movs	r3, #0
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f88:	2300      	movs	r3, #0
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 030c 	and.w	r3, r3, #12
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	f200 80a1 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0x34>
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003faa:	e09b      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_GetSysClockFreq+0x184>)
 8003fae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fb0:	e09b      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb6:	e098      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fc2:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d028      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	623b      	str	r3, [r7, #32]
 8003fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4b47      	ldr	r3, [pc, #284]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	fb03 f201 	mul.w	r2, r3, r1
 8003fe8:	2300      	movs	r3, #0
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a43      	ldr	r2, [pc, #268]	; (8004100 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ff2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff8:	460a      	mov	r2, r1
 8003ffa:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffe:	4413      	add	r3, r2
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	2200      	movs	r2, #0
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	61fa      	str	r2, [r7, #28]
 800400a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004012:	f7fc fc43 	bl	800089c <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4613      	mov	r3, r2
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401e:	e053      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004020:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	099b      	lsrs	r3, r3, #6
 8004026:	2200      	movs	r2, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	617a      	str	r2, [r7, #20]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004032:	f04f 0b00 	mov.w	fp, #0
 8004036:	4652      	mov	r2, sl
 8004038:	465b      	mov	r3, fp
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	0159      	lsls	r1, r3, #5
 8004044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004048:	0150      	lsls	r0, r2, #5
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	ebb2 080a 	subs.w	r8, r2, sl
 8004052:	eb63 090b 	sbc.w	r9, r3, fp
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004062:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004066:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800406a:	ebb2 0408 	subs.w	r4, r2, r8
 800406e:	eb63 0509 	sbc.w	r5, r3, r9
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	00eb      	lsls	r3, r5, #3
 800407c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004080:	00e2      	lsls	r2, r4, #3
 8004082:	4614      	mov	r4, r2
 8004084:	461d      	mov	r5, r3
 8004086:	eb14 030a 	adds.w	r3, r4, sl
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	eb45 030b 	adc.w	r3, r5, fp
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409e:	4629      	mov	r1, r5
 80040a0:	028b      	lsls	r3, r1, #10
 80040a2:	4621      	mov	r1, r4
 80040a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a8:	4621      	mov	r1, r4
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	2200      	movs	r2, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040bc:	f7fc fbee 	bl	800089c <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetSysClockFreq+0x184>)
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3740      	adds	r7, #64	; 0x40
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400
 8004100:	017d7840 	.word	0x017d7840

08004104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_RCC_GetHCLKFreq+0x14>)
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000000 	.word	0x20000000

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff0 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	0a9b      	lsrs	r3, r3, #10
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40023800 	.word	0x40023800
 8004140:	0800736c 	.word	0x0800736c

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffdc 	bl	8004104 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0b5b      	lsrs	r3, r3, #13
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	0800736c 	.word	0x0800736c

0800416c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07b      	b.n	8004276 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d108      	bne.n	8004198 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418e:	d009      	beq.n	80041a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
 8004196:	e005      	b.n	80041a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fd fa9a 	bl	80016f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	f003 0104 	and.w	r1, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0210 	and.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004264:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_SPI_Transmit+0x22>
 800429c:	2302      	movs	r3, #2
 800429e:	e126      	b.n	80044ee <HAL_SPI_Transmit+0x270>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042a8:	f7fd ffd6 	bl	8002258 <HAL_GetTick>
 80042ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042c2:	e10b      	b.n	80044dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Transmit+0x52>
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042d4:	e102      	b.n	80044dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800431c:	d10f      	bne.n	800433e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800433c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d007      	beq.n	800435c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004364:	d14b      	bne.n	80043fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_SPI_Transmit+0xf6>
 800436e:	8afb      	ldrh	r3, [r7, #22]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d13e      	bne.n	80043f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	881a      	ldrh	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004398:	e02b      	b.n	80043f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d112      	bne.n	80043ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	881a      	ldrh	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80043cc:	e011      	b.n	80043f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ce:	f7fd ff43 	bl	8002258 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d803      	bhi.n	80043e6 <HAL_SPI_Transmit+0x168>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d102      	bne.n	80043ec <HAL_SPI_Transmit+0x16e>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043f0:	e074      	b.n	80044dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ce      	bne.n	800439a <HAL_SPI_Transmit+0x11c>
 80043fc:	e04c      	b.n	8004498 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_SPI_Transmit+0x18e>
 8004406:	8afb      	ldrh	r3, [r7, #22]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d140      	bne.n	800448e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004432:	e02c      	b.n	800448e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b02      	cmp	r3, #2
 8004440:	d113      	bne.n	800446a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	; 0x36
 8004468:	e011      	b.n	800448e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446a:	f7fd fef5 	bl	8002258 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <HAL_SPI_Transmit+0x204>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d102      	bne.n	8004488 <HAL_SPI_Transmit+0x20a>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800448c:	e026      	b.n	80044dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1cd      	bne.n	8004434 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	6839      	ldr	r1, [r7, #0]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fa55 	bl	800494c <SPI_EndRxTxTransaction>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044b6:	2300      	movs	r3, #0
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e000      	b.n	80044dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80044da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3720      	adds	r7, #32
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b08c      	sub	sp, #48	; 0x30
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004504:	2301      	movs	r3, #1
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_SPI_TransmitReceive+0x26>
 8004518:	2302      	movs	r3, #2
 800451a:	e18a      	b.n	8004832 <HAL_SPI_TransmitReceive+0x33c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004524:	f7fd fe98 	bl	8002258 <HAL_GetTick>
 8004528:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800453e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004542:	2b01      	cmp	r3, #1
 8004544:	d00f      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x70>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454c:	d107      	bne.n	800455e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_SPI_TransmitReceive+0x68>
 8004556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800455a:	2b04      	cmp	r3, #4
 800455c:	d003      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800455e:	2302      	movs	r3, #2
 8004560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004564:	e15b      	b.n	800481e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x82>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SPI_TransmitReceive+0x82>
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d103      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800457e:	e14e      	b.n	800481e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b04      	cmp	r3, #4
 800458a:	d003      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2205      	movs	r2, #5
 8004590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	887a      	ldrh	r2, [r7, #2]
 80045aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	887a      	ldrh	r2, [r7, #2]
 80045b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d007      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f0:	d178      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x10a>
 80045fa:	8b7b      	ldrh	r3, [r7, #26]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d166      	bne.n	80046ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004624:	e053      	b.n	80046ce <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d11b      	bne.n	800466c <HAL_SPI_TransmitReceive+0x176>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_SPI_TransmitReceive+0x176>
 800463e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d113      	bne.n	800466c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	881a      	ldrh	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	1c9a      	adds	r2, r3, #2
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d119      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x1b8>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d014      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	b292      	uxth	r2, r2
 8004690:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	1c9a      	adds	r2, r3, #2
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046aa:	2301      	movs	r3, #1
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046ae:	f7fd fdd3 	bl	8002258 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d807      	bhi.n	80046ce <HAL_SPI_TransmitReceive+0x1d8>
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d003      	beq.n	80046ce <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046cc:	e0a7      	b.n	800481e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1a6      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x130>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1a1      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x130>
 80046e2:	e07c      	b.n	80047de <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_TransmitReceive+0x1fc>
 80046ec:	8b7b      	ldrh	r3, [r7, #26]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d16b      	bne.n	80047ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004718:	e057      	b.n	80047ca <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d11c      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x26c>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x26c>
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d114      	bne.n	8004762 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	330c      	adds	r3, #12
 8004742:	7812      	ldrb	r2, [r2, #0]
 8004744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d119      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x2ae>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d014      	beq.n	80047a4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047a0:	2301      	movs	r3, #1
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047a4:	f7fd fd58 	bl	8002258 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d803      	bhi.n	80047bc <HAL_SPI_TransmitReceive+0x2c6>
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x2cc>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047c8:	e029      	b.n	800481e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1a2      	bne.n	800471a <HAL_SPI_TransmitReceive+0x224>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d19d      	bne.n	800471a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f8b2 	bl	800494c <SPI_EndRxTxTransaction>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047fa:	e010      	b.n	800481e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	e000      	b.n	800481e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800481c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800482e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004832:	4618      	mov	r0, r3
 8004834:	3730      	adds	r7, #48	; 0x30
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800484c:	f7fd fd04 	bl	8002258 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	4413      	add	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800485c:	f7fd fcfc 	bl	8002258 <HAL_GetTick>
 8004860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	015b      	lsls	r3, r3, #5
 8004868:	0d1b      	lsrs	r3, r3, #20
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004872:	e054      	b.n	800491e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d050      	beq.n	800491e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800487c:	f7fd fcec 	bl	8002258 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	69fa      	ldr	r2, [r7, #28]
 8004888:	429a      	cmp	r2, r3
 800488a:	d902      	bls.n	8004892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d13d      	bne.n	800490e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048aa:	d111      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b4:	d004      	beq.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048be:	d107      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d8:	d10f      	bne.n	80048fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e017      	b.n	800493e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3b01      	subs	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4013      	ands	r3, r2
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	429a      	cmp	r2, r3
 800492c:	bf0c      	ite	eq
 800492e:	2301      	moveq	r3, #1
 8004930:	2300      	movne	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	461a      	mov	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	429a      	cmp	r2, r3
 800493a:	d19b      	bne.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000

0800494c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004958:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <SPI_EndRxTxTransaction+0x7c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <SPI_EndRxTxTransaction+0x80>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0d5b      	lsrs	r3, r3, #21
 8004964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d112      	bne.n	800499e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff ff5a 	bl	800483c <SPI_WaitFlagStateUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e00f      	b.n	80049be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d0f2      	beq.n	800499e <SPI_EndRxTxTransaction+0x52>
 80049b8:	e000      	b.n	80049bc <SPI_EndRxTxTransaction+0x70>
        break;
 80049ba:	bf00      	nop
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000000 	.word	0x20000000
 80049cc:	165e9f81 	.word	0x165e9f81

080049d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e041      	b.n	8004a66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc ff1e 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 fb5c 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e041      	b.n	8004b04 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7fc fead 	bl	80017f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f000 fb0d 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x24>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e022      	b.n	8004b76 <HAL_TIM_PWM_Start+0x6a>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d109      	bne.n	8004b4a <HAL_TIM_PWM_Start+0x3e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e015      	b.n	8004b76 <HAL_TIM_PWM_Start+0x6a>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x58>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start+0x6a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e068      	b.n	8004c50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x82>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	e013      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xaa>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0x92>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	e00b      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xaa>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0xa2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bac:	e003      	b.n	8004bb6 <HAL_TIM_PWM_Start+0xaa>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fd2a 	bl	8005618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a23      	ldr	r2, [pc, #140]	; (8004c58 <HAL_TIM_PWM_Start+0x14c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <HAL_TIM_PWM_Start+0x14c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d018      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d013      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <HAL_TIM_PWM_Start+0x150>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00e      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <HAL_TIM_PWM_Start+0x154>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_TIM_PWM_Start+0x158>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d004      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x10e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_TIM_PWM_Start+0x15c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d111      	bne.n	8004c3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d010      	beq.n	8004c4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	e007      	b.n	8004c4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40014000 	.word	0x40014000

08004c6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e097      	b.n	8004db0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fc fdef 	bl	8001878 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb0:	f023 0307 	bic.w	r3, r3, #7
 8004cb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	f000 fa03 	bl	80050cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689a      	ldr	r2, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004d0c:	f023 030c 	bic.w	r3, r3, #12
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	011a      	lsls	r2, r3, #4
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	031b      	lsls	r3, r3, #12
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e0ae      	b.n	8004f34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	f200 809f 	bhi.w	8004f24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004de6:	a201      	add	r2, pc, #4	; (adr r2, 8004dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004f25 	.word	0x08004f25
 8004df4:	08004f25 	.word	0x08004f25
 8004df8:	08004f25 	.word	0x08004f25
 8004dfc:	08004e61 	.word	0x08004e61
 8004e00:	08004f25 	.word	0x08004f25
 8004e04:	08004f25 	.word	0x08004f25
 8004e08:	08004f25 	.word	0x08004f25
 8004e0c:	08004ea3 	.word	0x08004ea3
 8004e10:	08004f25 	.word	0x08004f25
 8004e14:	08004f25 	.word	0x08004f25
 8004e18:	08004f25 	.word	0x08004f25
 8004e1c:	08004ee3 	.word	0x08004ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f9d0 	bl	80051cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0208 	orr.w	r2, r2, #8
 8004e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0204 	bic.w	r2, r2, #4
 8004e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6999      	ldr	r1, [r3, #24]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	619a      	str	r2, [r3, #24]
      break;
 8004e5e:	e064      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fa16 	bl	8005298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6999      	ldr	r1, [r3, #24]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	021a      	lsls	r2, r3, #8
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	619a      	str	r2, [r3, #24]
      break;
 8004ea0:	e043      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa61 	bl	8005370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0208 	orr.w	r2, r2, #8
 8004ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0204 	bic.w	r2, r2, #4
 8004ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69d9      	ldr	r1, [r3, #28]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	61da      	str	r2, [r3, #28]
      break;
 8004ee0:	e023      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 faab 	bl	8005444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69d9      	ldr	r1, [r3, #28]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	021a      	lsls	r2, r3, #8
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	61da      	str	r2, [r3, #28]
      break;
 8004f22:	e002      	b.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	75fb      	strb	r3, [r7, #23]
      break;
 8004f28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_ConfigClockSource+0x1c>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0b4      	b.n	80050c2 <HAL_TIM_ConfigClockSource+0x186>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f90:	d03e      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0xd4>
 8004f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f96:	f200 8087 	bhi.w	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9e:	f000 8086 	beq.w	80050ae <HAL_TIM_ConfigClockSource+0x172>
 8004fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa6:	d87f      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b70      	cmp	r3, #112	; 0x70
 8004faa:	d01a      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0xa6>
 8004fac:	2b70      	cmp	r3, #112	; 0x70
 8004fae:	d87b      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b60      	cmp	r3, #96	; 0x60
 8004fb2:	d050      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x11a>
 8004fb4:	2b60      	cmp	r3, #96	; 0x60
 8004fb6:	d877      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b50      	cmp	r3, #80	; 0x50
 8004fba:	d03c      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0xfa>
 8004fbc:	2b50      	cmp	r3, #80	; 0x50
 8004fbe:	d873      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d058      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x13a>
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d86f      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b30      	cmp	r3, #48	; 0x30
 8004fca:	d064      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15a>
 8004fcc:	2b30      	cmp	r3, #48	; 0x30
 8004fce:	d86b      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d060      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15a>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d867      	bhi.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	2b10      	cmp	r3, #16
 8004fde:	d05a      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe0:	e062      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6899      	ldr	r1, [r3, #8]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f000 faf1 	bl	80055d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	609a      	str	r2, [r3, #8]
      break;
 800500e:	e04f      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6899      	ldr	r1, [r3, #8]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f000 fada 	bl	80055d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005032:	609a      	str	r2, [r3, #8]
      break;
 8005034:	e03c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	461a      	mov	r2, r3
 8005044:	f000 fa4e 	bl	80054e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2150      	movs	r1, #80	; 0x50
 800504e:	4618      	mov	r0, r3
 8005050:	f000 faa7 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005054:	e02c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fa6d 	bl	8005542 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2160      	movs	r1, #96	; 0x60
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fa97 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005074:	e01c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6859      	ldr	r1, [r3, #4]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	461a      	mov	r2, r3
 8005084:	f000 fa2e 	bl	80054e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2140      	movs	r1, #64	; 0x40
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa87 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005094:	e00c      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fa7e 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 80050a6:	e003      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	73fb      	strb	r3, [r7, #15]
      break;
 80050ac:	e000      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00f      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d00b      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a31      	ldr	r2, [pc, #196]	; (80051b4 <TIM_Base_SetConfig+0xe8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d007      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <TIM_Base_SetConfig+0xec>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_Base_SetConfig+0x38>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	; (80051bc <TIM_Base_SetConfig+0xf0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <TIM_Base_SetConfig+0xe8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a21      	ldr	r2, [pc, #132]	; (80051b8 <TIM_Base_SetConfig+0xec>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <TIM_Base_SetConfig+0xf0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <TIM_Base_SetConfig+0xf4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <TIM_Base_SetConfig+0xf8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <TIM_Base_SetConfig+0xfc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <TIM_Base_SetConfig+0xe4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0302 	bic.w	r3, r3, #2
 8005214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1c      	ldr	r2, [pc, #112]	; (8005294 <TIM_OC1_SetConfig+0xc8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10c      	bne.n	8005242 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0308 	bic.w	r3, r3, #8
 800522e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a13      	ldr	r2, [pc, #76]	; (8005294 <TIM_OC1_SetConfig+0xc8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d111      	bne.n	800526e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40010000 	.word	0x40010000

08005298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f023 0210 	bic.w	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0320 	bic.w	r3, r3, #32
 80052e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a1e      	ldr	r2, [pc, #120]	; (800536c <TIM_OC2_SetConfig+0xd4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d10d      	bne.n	8005314 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005312:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <TIM_OC2_SetConfig+0xd4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d113      	bne.n	8005344 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40010000 	.word	0x40010000

08005370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <TIM_OC3_SetConfig+0xd0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10d      	bne.n	80053ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <TIM_OC3_SetConfig+0xd0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d113      	bne.n	800541a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40010000 	.word	0x40010000

08005444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	021b      	lsls	r3, r3, #8
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800548e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	031b      	lsls	r3, r3, #12
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a10      	ldr	r2, [pc, #64]	; (80054e0 <TIM_OC4_SetConfig+0x9c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d109      	bne.n	80054b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	621a      	str	r2, [r3, #32]
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000

080054e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 030a 	bic.w	r3, r3, #10
 8005520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005542:	b480      	push	{r7}
 8005544:	b087      	sub	sp, #28
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0210 	bic.w	r2, r3, #16
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800557e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	f043 0307 	orr.w	r3, r3, #7
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	609a      	str	r2, [r3, #8]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2201      	movs	r2, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	43db      	mvns	r3, r3
 800563a:	401a      	ands	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	431a      	orrs	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e050      	b.n	800571e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d013      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a16      	ldr	r2, [pc, #88]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a15      	ldr	r2, [pc, #84]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a13      	ldr	r2, [pc, #76]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10c      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	4313      	orrs	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40000c00 	.word	0x40000c00
 800573c:	40014000 	.word	0x40014000

08005740 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005758:	2302      	movs	r3, #2
 800575a:	e03d      	b.n	80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e03f      	b.n	8005876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fc f8fc 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	; 0x24
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fddf 	bl	80063ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800583c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800584c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b08a      	sub	sp, #40	; 0x28
 8005882:	af02      	add	r7, sp, #8
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b20      	cmp	r3, #32
 800589c:	d17c      	bne.n	8005998 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_UART_Transmit+0x2c>
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e075      	b.n	800599a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_UART_Transmit+0x3e>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e06e      	b.n	800599a <HAL_UART_Transmit+0x11c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2221      	movs	r2, #33	; 0x21
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058d2:	f7fc fcc1 	bl	8002258 <HAL_GetTick>
 80058d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ec:	d108      	bne.n	8005900 <HAL_UART_Transmit+0x82>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d104      	bne.n	8005900 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	e003      	b.n	8005908 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005910:	e02a      	b.n	8005968 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2180      	movs	r1, #128	; 0x80
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fb1f 	bl	8005f60 <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e036      	b.n	800599a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	3302      	adds	r3, #2
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	e007      	b.n	800595a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	3301      	adds	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1cf      	bne.n	8005912 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2200      	movs	r2, #0
 800597a:	2140      	movs	r1, #64	; 0x40
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 faef 	bl	8005f60 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e006      	b.n	800599a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d11d      	bne.n	80059f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Receive_IT+0x26>
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e016      	b.n	80059fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UART_Receive_IT+0x38>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e00f      	b.n	80059fa <HAL_UART_Receive_IT+0x58>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fb24 	bl	800603c <UART_Start_Receive_IT>
 80059f4:	4603      	mov	r3, r0
 80059f6:	e000      	b.n	80059fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b0ba      	sub	sp, #232	; 0xe8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d009      	beq.n	8005a6a <HAL_UART_IRQHandler+0x66>
 8005a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fc07 	bl	8006276 <UART_Receive_IT>
      return;
 8005a68:	e256      	b.n	8005f18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80de 	beq.w	8005c30 <HAL_UART_IRQHandler+0x22c>
 8005a74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d106      	bne.n	8005a8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80d1 	beq.w	8005c30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00b      	beq.n	8005ab2 <HAL_UART_IRQHandler+0xae>
 8005a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f043 0201 	orr.w	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xd2>
 8005abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0202 	orr.w	r2, r3, #2
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_UART_IRQHandler+0xf6>
 8005ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d005      	beq.n	8005afa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0204 	orr.w	r2, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d011      	beq.n	8005b2a <HAL_UART_IRQHandler+0x126>
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f043 0208 	orr.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 81ed 	beq.w	8005f0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d008      	beq.n	8005b52 <HAL_UART_IRQHandler+0x14e>
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb92 	bl	8006276 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5c:	2b40      	cmp	r3, #64	; 0x40
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <HAL_UART_IRQHandler+0x17a>
 8005b76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d04f      	beq.n	8005c1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa9a 	bl	80060b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d141      	bne.n	8005c16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3314      	adds	r3, #20
 8005b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1d9      	bne.n	8005b92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d013      	beq.n	8005c0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	4a7d      	ldr	r2, [pc, #500]	; (8005de0 <HAL_UART_IRQHandler+0x3dc>)
 8005bec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fc fce1 	bl	80025ba <HAL_DMA_Abort_IT>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d016      	beq.n	8005c2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c0c:	e00e      	b.n	8005c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f990 	bl	8005f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c14:	e00a      	b.n	8005c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f98c 	bl	8005f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	e006      	b.n	8005c2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f988 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c2a:	e170      	b.n	8005f0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	bf00      	nop
    return;
 8005c2e:	e16e      	b.n	8005f0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	f040 814a 	bne.w	8005ece <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8143 	beq.w	8005ece <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 813c 	beq.w	8005ece <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	f040 80b4 	bne.w	8005de4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8140 	beq.w	8005f12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f080 8139 	bcs.w	8005f12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	f000 8088 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ccc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d9      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3314      	adds	r3, #20
 8005d08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e1      	bne.n	8005d02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d96:	f023 0310 	bic.w	r3, r3, #16
 8005d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005da8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005daa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e3      	bne.n	8005d84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fc fb8a 	bl	80024da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f8b6 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ddc:	e099      	b.n	8005f12 <HAL_UART_IRQHandler+0x50e>
 8005dde:	bf00      	nop
 8005de0:	0800617f 	.word	0x0800617f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 808b 	beq.w	8005f16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 8086 	beq.w	8005f16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e2e:	647a      	str	r2, [r7, #68]	; 0x44
 8005e30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e3      	bne.n	8005e0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	623b      	str	r3, [r7, #32]
   return(result);
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3314      	adds	r3, #20
 8005e62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e66:	633a      	str	r2, [r7, #48]	; 0x30
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e3      	bne.n	8005e42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	330c      	adds	r3, #12
 8005e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0310 	bic.w	r3, r3, #16
 8005e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005eac:	61fa      	str	r2, [r7, #28]
 8005eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb0:	69b9      	ldr	r1, [r7, #24]
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	e841 2300 	strex	r3, r2, [r1]
 8005eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1e3      	bne.n	8005e88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f83e 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ecc:	e023      	b.n	8005f16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_UART_IRQHandler+0x4ea>
 8005eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f95d 	bl	80061a6 <UART_Transmit_IT>
    return;
 8005eec:	e014      	b.n	8005f18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00e      	beq.n	8005f18 <HAL_UART_IRQHandler+0x514>
 8005efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f99d 	bl	8006246 <UART_EndTransmit_IT>
    return;
 8005f0c:	e004      	b.n	8005f18 <HAL_UART_IRQHandler+0x514>
    return;
 8005f0e:	bf00      	nop
 8005f10:	e002      	b.n	8005f18 <HAL_UART_IRQHandler+0x514>
      return;
 8005f12:	bf00      	nop
 8005f14:	e000      	b.n	8005f18 <HAL_UART_IRQHandler+0x514>
      return;
 8005f16:	bf00      	nop
  }
}
 8005f18:	37e8      	adds	r7, #232	; 0xe8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop

08005f20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b090      	sub	sp, #64	; 0x40
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f70:	e050      	b.n	8006014 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d04c      	beq.n	8006014 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f80:	f7fc f96a 	bl	8002258 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d241      	bcs.n	8006014 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fb0:	637a      	str	r2, [r7, #52]	; 0x34
 8005fb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3314      	adds	r3, #20
 8005fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fe4:	623a      	str	r2, [r7, #32]
 8005fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	69f9      	ldr	r1, [r7, #28]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e00f      	b.n	8006034 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4013      	ands	r3, r2
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	d09f      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3740      	adds	r7, #64	; 0x40
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	4613      	mov	r3, r2
 8006048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2222      	movs	r2, #34	; 0x22
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006088:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0220 	orr.w	r2, r2, #32
 80060a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b095      	sub	sp, #84	; 0x54
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	330c      	adds	r3, #12
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060e0:	643a      	str	r2, [r7, #64]	; 0x40
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e5      	bne.n	80060c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3314      	adds	r3, #20
 80060fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	e853 3f00 	ldrex	r3, [r3]
 8006102:	61fb      	str	r3, [r7, #28]
   return(result);
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	64bb      	str	r3, [r7, #72]	; 0x48
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3314      	adds	r3, #20
 8006112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800611a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800611c:	e841 2300 	strex	r3, r2, [r1]
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e5      	bne.n	80060f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	2b01      	cmp	r3, #1
 800612e:	d119      	bne.n	8006164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f023 0310 	bic.w	r3, r3, #16
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006150:	61ba      	str	r2, [r7, #24]
 8006152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6979      	ldr	r1, [r7, #20]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	613b      	str	r3, [r7, #16]
   return(result);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006172:	bf00      	nop
 8006174:	3754      	adds	r7, #84	; 0x54
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f7ff fecb 	bl	8005f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800619e:	bf00      	nop
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b21      	cmp	r3, #33	; 0x21
 80061b8:	d13e      	bne.n	8006238 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d114      	bne.n	80061ee <UART_Transmit_IT+0x48>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d110      	bne.n	80061ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	621a      	str	r2, [r3, #32]
 80061ec:	e008      	b.n	8006200 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6211      	str	r1, [r2, #32]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29b      	uxth	r3, r3
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	4619      	mov	r1, r3
 800620e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10f      	bne.n	8006234 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006222:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006232:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e000      	b.n	800623a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006238:	2302      	movs	r3, #2
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fe5a 	bl	8005f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b08c      	sub	sp, #48	; 0x30
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b22      	cmp	r3, #34	; 0x22
 8006288:	f040 80ab 	bne.w	80063e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006294:	d117      	bne.n	80062c6 <UART_Receive_IT+0x50>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d113      	bne.n	80062c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	1c9a      	adds	r2, r3, #2
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
 80062c4:	e026      	b.n	8006314 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d8:	d007      	beq.n	80062ea <UART_Receive_IT+0x74>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10a      	bne.n	80062f8 <UART_Receive_IT+0x82>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	701a      	strb	r2, [r3, #0]
 80062f6:	e008      	b.n	800630a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4619      	mov	r1, r3
 8006322:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006324:	2b00      	cmp	r3, #0
 8006326:	d15a      	bne.n	80063de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0220 	bic.w	r2, r2, #32
 8006336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695a      	ldr	r2, [r3, #20]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0201 	bic.w	r2, r2, #1
 8006356:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	2b01      	cmp	r3, #1
 8006366:	d135      	bne.n	80063d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	330c      	adds	r3, #12
 8006374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	613b      	str	r3, [r7, #16]
   return(result);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f023 0310 	bic.w	r3, r3, #16
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638e:	623a      	str	r2, [r7, #32]
 8006390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	69f9      	ldr	r1, [r7, #28]
 8006394:	6a3a      	ldr	r2, [r7, #32]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	61bb      	str	r3, [r7, #24]
   return(result);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b10      	cmp	r3, #16
 80063ae:	d10a      	bne.n	80063c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff fdbb 	bl	8005f48 <HAL_UARTEx_RxEventCallback>
 80063d2:	e002      	b.n	80063da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fb f8ff 	bl	80015d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	e002      	b.n	80063e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	e000      	b.n	80063e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3730      	adds	r7, #48	; 0x30
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f0:	b0c0      	sub	sp, #256	; 0x100
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	68d9      	ldr	r1, [r3, #12]
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	ea40 0301 	orr.w	r3, r0, r1
 8006414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	431a      	orrs	r2, r3
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	431a      	orrs	r2, r3
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006444:	f021 010c 	bic.w	r1, r1, #12
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006452:	430b      	orrs	r3, r1
 8006454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006466:	6999      	ldr	r1, [r3, #24]
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	ea40 0301 	orr.w	r3, r0, r1
 8006472:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b8f      	ldr	r3, [pc, #572]	; (80066b8 <UART_SetConfig+0x2cc>)
 800647c:	429a      	cmp	r2, r3
 800647e:	d005      	beq.n	800648c <UART_SetConfig+0xa0>
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b8d      	ldr	r3, [pc, #564]	; (80066bc <UART_SetConfig+0x2d0>)
 8006488:	429a      	cmp	r2, r3
 800648a:	d104      	bne.n	8006496 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800648c:	f7fd fe5a 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8006490:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006494:	e003      	b.n	800649e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006496:	f7fd fe41 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 800649a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a8:	f040 810c 	bne.w	80066c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064be:	4622      	mov	r2, r4
 80064c0:	462b      	mov	r3, r5
 80064c2:	1891      	adds	r1, r2, r2
 80064c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064c6:	415b      	adcs	r3, r3
 80064c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064ce:	4621      	mov	r1, r4
 80064d0:	eb12 0801 	adds.w	r8, r2, r1
 80064d4:	4629      	mov	r1, r5
 80064d6:	eb43 0901 	adc.w	r9, r3, r1
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064ee:	4690      	mov	r8, r2
 80064f0:	4699      	mov	r9, r3
 80064f2:	4623      	mov	r3, r4
 80064f4:	eb18 0303 	adds.w	r3, r8, r3
 80064f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064fc:	462b      	mov	r3, r5
 80064fe:	eb49 0303 	adc.w	r3, r9, r3
 8006502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006512:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800651a:	460b      	mov	r3, r1
 800651c:	18db      	adds	r3, r3, r3
 800651e:	653b      	str	r3, [r7, #80]	; 0x50
 8006520:	4613      	mov	r3, r2
 8006522:	eb42 0303 	adc.w	r3, r2, r3
 8006526:	657b      	str	r3, [r7, #84]	; 0x54
 8006528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800652c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006530:	f7fa f9b4 	bl	800089c <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <UART_SetConfig+0x2d4>)
 800653a:	fba3 2302 	umull	r2, r3, r3, r2
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	011c      	lsls	r4, r3, #4
 8006542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006546:	2200      	movs	r2, #0
 8006548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800654c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006550:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006554:	4642      	mov	r2, r8
 8006556:	464b      	mov	r3, r9
 8006558:	1891      	adds	r1, r2, r2
 800655a:	64b9      	str	r1, [r7, #72]	; 0x48
 800655c:	415b      	adcs	r3, r3
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006564:	4641      	mov	r1, r8
 8006566:	eb12 0a01 	adds.w	sl, r2, r1
 800656a:	4649      	mov	r1, r9
 800656c:	eb43 0b01 	adc.w	fp, r3, r1
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800657c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006584:	4692      	mov	sl, r2
 8006586:	469b      	mov	fp, r3
 8006588:	4643      	mov	r3, r8
 800658a:	eb1a 0303 	adds.w	r3, sl, r3
 800658e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006592:	464b      	mov	r3, r9
 8006594:	eb4b 0303 	adc.w	r3, fp, r3
 8006598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065b0:	460b      	mov	r3, r1
 80065b2:	18db      	adds	r3, r3, r3
 80065b4:	643b      	str	r3, [r7, #64]	; 0x40
 80065b6:	4613      	mov	r3, r2
 80065b8:	eb42 0303 	adc.w	r3, r2, r3
 80065bc:	647b      	str	r3, [r7, #68]	; 0x44
 80065be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065c6:	f7fa f969 	bl	800089c <__aeabi_uldivmod>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	4b3b      	ldr	r3, [pc, #236]	; (80066c0 <UART_SetConfig+0x2d4>)
 80065d2:	fba3 2301 	umull	r2, r3, r3, r1
 80065d6:	095b      	lsrs	r3, r3, #5
 80065d8:	2264      	movs	r2, #100	; 0x64
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	1acb      	subs	r3, r1, r3
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065e6:	4b36      	ldr	r3, [pc, #216]	; (80066c0 <UART_SetConfig+0x2d4>)
 80065e8:	fba3 2302 	umull	r2, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065f4:	441c      	add	r4, r3
 80065f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006600:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006604:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	1891      	adds	r1, r2, r2
 800660e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006610:	415b      	adcs	r3, r3
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006618:	4641      	mov	r1, r8
 800661a:	1851      	adds	r1, r2, r1
 800661c:	6339      	str	r1, [r7, #48]	; 0x30
 800661e:	4649      	mov	r1, r9
 8006620:	414b      	adcs	r3, r1
 8006622:	637b      	str	r3, [r7, #52]	; 0x34
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006630:	4659      	mov	r1, fp
 8006632:	00cb      	lsls	r3, r1, #3
 8006634:	4651      	mov	r1, sl
 8006636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800663a:	4651      	mov	r1, sl
 800663c:	00ca      	lsls	r2, r1, #3
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	4603      	mov	r3, r0
 8006644:	4642      	mov	r2, r8
 8006646:	189b      	adds	r3, r3, r2
 8006648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800664c:	464b      	mov	r3, r9
 800664e:	460a      	mov	r2, r1
 8006650:	eb42 0303 	adc.w	r3, r2, r3
 8006654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006664:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800666c:	460b      	mov	r3, r1
 800666e:	18db      	adds	r3, r3, r3
 8006670:	62bb      	str	r3, [r7, #40]	; 0x28
 8006672:	4613      	mov	r3, r2
 8006674:	eb42 0303 	adc.w	r3, r2, r3
 8006678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800667e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006682:	f7fa f90b 	bl	800089c <__aeabi_uldivmod>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <UART_SetConfig+0x2d4>)
 800668c:	fba3 1302 	umull	r1, r3, r3, r2
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	2164      	movs	r1, #100	; 0x64
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	3332      	adds	r3, #50	; 0x32
 800669e:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <UART_SetConfig+0x2d4>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	f003 0207 	and.w	r2, r3, #7
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4422      	add	r2, r4
 80066b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066b4:	e105      	b.n	80068c2 <UART_SetConfig+0x4d6>
 80066b6:	bf00      	nop
 80066b8:	40011000 	.word	0x40011000
 80066bc:	40011400 	.word	0x40011400
 80066c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066d6:	4642      	mov	r2, r8
 80066d8:	464b      	mov	r3, r9
 80066da:	1891      	adds	r1, r2, r2
 80066dc:	6239      	str	r1, [r7, #32]
 80066de:	415b      	adcs	r3, r3
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
 80066e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066e6:	4641      	mov	r1, r8
 80066e8:	1854      	adds	r4, r2, r1
 80066ea:	4649      	mov	r1, r9
 80066ec:	eb43 0501 	adc.w	r5, r3, r1
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	00eb      	lsls	r3, r5, #3
 80066fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066fe:	00e2      	lsls	r2, r4, #3
 8006700:	4614      	mov	r4, r2
 8006702:	461d      	mov	r5, r3
 8006704:	4643      	mov	r3, r8
 8006706:	18e3      	adds	r3, r4, r3
 8006708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800670c:	464b      	mov	r3, r9
 800670e:	eb45 0303 	adc.w	r3, r5, r3
 8006712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006732:	4629      	mov	r1, r5
 8006734:	008b      	lsls	r3, r1, #2
 8006736:	4621      	mov	r1, r4
 8006738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800673c:	4621      	mov	r1, r4
 800673e:	008a      	lsls	r2, r1, #2
 8006740:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006744:	f7fa f8aa 	bl	800089c <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4b60      	ldr	r3, [pc, #384]	; (80068d0 <UART_SetConfig+0x4e4>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	011c      	lsls	r4, r3, #4
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006760:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006764:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	1891      	adds	r1, r2, r2
 800676e:	61b9      	str	r1, [r7, #24]
 8006770:	415b      	adcs	r3, r3
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006778:	4641      	mov	r1, r8
 800677a:	1851      	adds	r1, r2, r1
 800677c:	6139      	str	r1, [r7, #16]
 800677e:	4649      	mov	r1, r9
 8006780:	414b      	adcs	r3, r1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006790:	4659      	mov	r1, fp
 8006792:	00cb      	lsls	r3, r1, #3
 8006794:	4651      	mov	r1, sl
 8006796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800679a:	4651      	mov	r1, sl
 800679c:	00ca      	lsls	r2, r1, #3
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	4642      	mov	r2, r8
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067ac:	464b      	mov	r3, r9
 80067ae:	460a      	mov	r2, r1
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067d0:	4649      	mov	r1, r9
 80067d2:	008b      	lsls	r3, r1, #2
 80067d4:	4641      	mov	r1, r8
 80067d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067da:	4641      	mov	r1, r8
 80067dc:	008a      	lsls	r2, r1, #2
 80067de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067e2:	f7fa f85b 	bl	800089c <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b39      	ldr	r3, [pc, #228]	; (80068d0 <UART_SetConfig+0x4e4>)
 80067ec:	fba3 1302 	umull	r1, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	2164      	movs	r1, #100	; 0x64
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	3332      	adds	r3, #50	; 0x32
 80067fe:	4a34      	ldr	r2, [pc, #208]	; (80068d0 <UART_SetConfig+0x4e4>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800680a:	441c      	add	r4, r3
 800680c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006810:	2200      	movs	r2, #0
 8006812:	673b      	str	r3, [r7, #112]	; 0x70
 8006814:	677a      	str	r2, [r7, #116]	; 0x74
 8006816:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800681a:	4642      	mov	r2, r8
 800681c:	464b      	mov	r3, r9
 800681e:	1891      	adds	r1, r2, r2
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	415b      	adcs	r3, r3
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800682a:	4641      	mov	r1, r8
 800682c:	1851      	adds	r1, r2, r1
 800682e:	6039      	str	r1, [r7, #0]
 8006830:	4649      	mov	r1, r9
 8006832:	414b      	adcs	r3, r1
 8006834:	607b      	str	r3, [r7, #4]
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006842:	4659      	mov	r1, fp
 8006844:	00cb      	lsls	r3, r1, #3
 8006846:	4651      	mov	r1, sl
 8006848:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800684c:	4651      	mov	r1, sl
 800684e:	00ca      	lsls	r2, r1, #3
 8006850:	4610      	mov	r0, r2
 8006852:	4619      	mov	r1, r3
 8006854:	4603      	mov	r3, r0
 8006856:	4642      	mov	r2, r8
 8006858:	189b      	adds	r3, r3, r2
 800685a:	66bb      	str	r3, [r7, #104]	; 0x68
 800685c:	464b      	mov	r3, r9
 800685e:	460a      	mov	r2, r1
 8006860:	eb42 0303 	adc.w	r3, r2, r3
 8006864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	663b      	str	r3, [r7, #96]	; 0x60
 8006870:	667a      	str	r2, [r7, #100]	; 0x64
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800687e:	4649      	mov	r1, r9
 8006880:	008b      	lsls	r3, r1, #2
 8006882:	4641      	mov	r1, r8
 8006884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006888:	4641      	mov	r1, r8
 800688a:	008a      	lsls	r2, r1, #2
 800688c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006890:	f7fa f804 	bl	800089c <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4b0d      	ldr	r3, [pc, #52]	; (80068d0 <UART_SetConfig+0x4e4>)
 800689a:	fba3 1302 	umull	r1, r3, r3, r2
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	2164      	movs	r1, #100	; 0x64
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	3332      	adds	r3, #50	; 0x32
 80068ac:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <UART_SetConfig+0x4e4>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	f003 020f 	and.w	r2, r3, #15
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4422      	add	r2, r4
 80068c0:	609a      	str	r2, [r3, #8]
}
 80068c2:	bf00      	nop
 80068c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068c8:	46bd      	mov	sp, r7
 80068ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ce:	bf00      	nop
 80068d0:	51eb851f 	.word	0x51eb851f

080068d4 <_Znwj>:
 80068d4:	2801      	cmp	r0, #1
 80068d6:	bf38      	it	cc
 80068d8:	2001      	movcc	r0, #1
 80068da:	b510      	push	{r4, lr}
 80068dc:	4604      	mov	r4, r0
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f844 	bl	800696c <malloc>
 80068e4:	b930      	cbnz	r0, 80068f4 <_Znwj+0x20>
 80068e6:	f000 f807 	bl	80068f8 <_ZSt15get_new_handlerv>
 80068ea:	b908      	cbnz	r0, 80068f0 <_Znwj+0x1c>
 80068ec:	f000 f80c 	bl	8006908 <abort>
 80068f0:	4780      	blx	r0
 80068f2:	e7f4      	b.n	80068de <_Znwj+0xa>
 80068f4:	bd10      	pop	{r4, pc}
	...

080068f8 <_ZSt15get_new_handlerv>:
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <_ZSt15get_new_handlerv+0xc>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	f3bf 8f5b 	dmb	ish
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000304 	.word	0x20000304

08006908 <abort>:
 8006908:	b508      	push	{r3, lr}
 800690a:	2006      	movs	r0, #6
 800690c:	f000 f956 	bl	8006bbc <raise>
 8006910:	2001      	movs	r0, #1
 8006912:	f7fb f95b 	bl	8001bcc <_exit>
	...

08006918 <__errno>:
 8006918:	4b01      	ldr	r3, [pc, #4]	; (8006920 <__errno+0x8>)
 800691a:	6818      	ldr	r0, [r3, #0]
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	2000000c 	.word	0x2000000c

08006924 <__libc_init_array>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	4d0d      	ldr	r5, [pc, #52]	; (800695c <__libc_init_array+0x38>)
 8006928:	4c0d      	ldr	r4, [pc, #52]	; (8006960 <__libc_init_array+0x3c>)
 800692a:	1b64      	subs	r4, r4, r5
 800692c:	10a4      	asrs	r4, r4, #2
 800692e:	2600      	movs	r6, #0
 8006930:	42a6      	cmp	r6, r4
 8006932:	d109      	bne.n	8006948 <__libc_init_array+0x24>
 8006934:	4d0b      	ldr	r5, [pc, #44]	; (8006964 <__libc_init_array+0x40>)
 8006936:	4c0c      	ldr	r4, [pc, #48]	; (8006968 <__libc_init_array+0x44>)
 8006938:	f000 fcda 	bl	80072f0 <_init>
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	2600      	movs	r6, #0
 8006942:	42a6      	cmp	r6, r4
 8006944:	d105      	bne.n	8006952 <__libc_init_array+0x2e>
 8006946:	bd70      	pop	{r4, r5, r6, pc}
 8006948:	f855 3b04 	ldr.w	r3, [r5], #4
 800694c:	4798      	blx	r3
 800694e:	3601      	adds	r6, #1
 8006950:	e7ee      	b.n	8006930 <__libc_init_array+0xc>
 8006952:	f855 3b04 	ldr.w	r3, [r5], #4
 8006956:	4798      	blx	r3
 8006958:	3601      	adds	r6, #1
 800695a:	e7f2      	b.n	8006942 <__libc_init_array+0x1e>
 800695c:	080073b0 	.word	0x080073b0
 8006960:	080073b0 	.word	0x080073b0
 8006964:	080073b0 	.word	0x080073b0
 8006968:	080073b4 	.word	0x080073b4

0800696c <malloc>:
 800696c:	4b02      	ldr	r3, [pc, #8]	; (8006978 <malloc+0xc>)
 800696e:	4601      	mov	r1, r0
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	f000 b877 	b.w	8006a64 <_malloc_r>
 8006976:	bf00      	nop
 8006978:	2000000c 	.word	0x2000000c

0800697c <memset>:
 800697c:	4402      	add	r2, r0
 800697e:	4603      	mov	r3, r0
 8006980:	4293      	cmp	r3, r2
 8006982:	d100      	bne.n	8006986 <memset+0xa>
 8006984:	4770      	bx	lr
 8006986:	f803 1b01 	strb.w	r1, [r3], #1
 800698a:	e7f9      	b.n	8006980 <memset+0x4>

0800698c <_free_r>:
 800698c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800698e:	2900      	cmp	r1, #0
 8006990:	d044      	beq.n	8006a1c <_free_r+0x90>
 8006992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006996:	9001      	str	r0, [sp, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f1a1 0404 	sub.w	r4, r1, #4
 800699e:	bfb8      	it	lt
 80069a0:	18e4      	addlt	r4, r4, r3
 80069a2:	f000 f947 	bl	8006c34 <__malloc_lock>
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <_free_r+0x94>)
 80069a8:	9801      	ldr	r0, [sp, #4]
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	b933      	cbnz	r3, 80069bc <_free_r+0x30>
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	6014      	str	r4, [r2, #0]
 80069b2:	b003      	add	sp, #12
 80069b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b8:	f000 b942 	b.w	8006c40 <__malloc_unlock>
 80069bc:	42a3      	cmp	r3, r4
 80069be:	d908      	bls.n	80069d2 <_free_r+0x46>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	1961      	adds	r1, r4, r5
 80069c4:	428b      	cmp	r3, r1
 80069c6:	bf01      	itttt	eq
 80069c8:	6819      	ldreq	r1, [r3, #0]
 80069ca:	685b      	ldreq	r3, [r3, #4]
 80069cc:	1949      	addeq	r1, r1, r5
 80069ce:	6021      	streq	r1, [r4, #0]
 80069d0:	e7ed      	b.n	80069ae <_free_r+0x22>
 80069d2:	461a      	mov	r2, r3
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	b10b      	cbz	r3, 80069dc <_free_r+0x50>
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d9fa      	bls.n	80069d2 <_free_r+0x46>
 80069dc:	6811      	ldr	r1, [r2, #0]
 80069de:	1855      	adds	r5, r2, r1
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	d10b      	bne.n	80069fc <_free_r+0x70>
 80069e4:	6824      	ldr	r4, [r4, #0]
 80069e6:	4421      	add	r1, r4
 80069e8:	1854      	adds	r4, r2, r1
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	d1e0      	bne.n	80069b2 <_free_r+0x26>
 80069f0:	681c      	ldr	r4, [r3, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	6053      	str	r3, [r2, #4]
 80069f6:	4421      	add	r1, r4
 80069f8:	6011      	str	r1, [r2, #0]
 80069fa:	e7da      	b.n	80069b2 <_free_r+0x26>
 80069fc:	d902      	bls.n	8006a04 <_free_r+0x78>
 80069fe:	230c      	movs	r3, #12
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	e7d6      	b.n	80069b2 <_free_r+0x26>
 8006a04:	6825      	ldr	r5, [r4, #0]
 8006a06:	1961      	adds	r1, r4, r5
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	bf04      	itt	eq
 8006a0c:	6819      	ldreq	r1, [r3, #0]
 8006a0e:	685b      	ldreq	r3, [r3, #4]
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	bf04      	itt	eq
 8006a14:	1949      	addeq	r1, r1, r5
 8006a16:	6021      	streq	r1, [r4, #0]
 8006a18:	6054      	str	r4, [r2, #4]
 8006a1a:	e7ca      	b.n	80069b2 <_free_r+0x26>
 8006a1c:	b003      	add	sp, #12
 8006a1e:	bd30      	pop	{r4, r5, pc}
 8006a20:	20000308 	.word	0x20000308

08006a24 <sbrk_aligned>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4e0e      	ldr	r6, [pc, #56]	; (8006a60 <sbrk_aligned+0x3c>)
 8006a28:	460c      	mov	r4, r1
 8006a2a:	6831      	ldr	r1, [r6, #0]
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	b911      	cbnz	r1, 8006a36 <sbrk_aligned+0x12>
 8006a30:	f000 f88c 	bl	8006b4c <_sbrk_r>
 8006a34:	6030      	str	r0, [r6, #0]
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f000 f887 	bl	8006b4c <_sbrk_r>
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d00a      	beq.n	8006a58 <sbrk_aligned+0x34>
 8006a42:	1cc4      	adds	r4, r0, #3
 8006a44:	f024 0403 	bic.w	r4, r4, #3
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d007      	beq.n	8006a5c <sbrk_aligned+0x38>
 8006a4c:	1a21      	subs	r1, r4, r0
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f87c 	bl	8006b4c <_sbrk_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d101      	bne.n	8006a5c <sbrk_aligned+0x38>
 8006a58:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	2000030c 	.word	0x2000030c

08006a64 <_malloc_r>:
 8006a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a68:	1ccd      	adds	r5, r1, #3
 8006a6a:	f025 0503 	bic.w	r5, r5, #3
 8006a6e:	3508      	adds	r5, #8
 8006a70:	2d0c      	cmp	r5, #12
 8006a72:	bf38      	it	cc
 8006a74:	250c      	movcc	r5, #12
 8006a76:	2d00      	cmp	r5, #0
 8006a78:	4607      	mov	r7, r0
 8006a7a:	db01      	blt.n	8006a80 <_malloc_r+0x1c>
 8006a7c:	42a9      	cmp	r1, r5
 8006a7e:	d905      	bls.n	8006a8c <_malloc_r+0x28>
 8006a80:	230c      	movs	r3, #12
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	2600      	movs	r6, #0
 8006a86:	4630      	mov	r0, r6
 8006a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8c:	4e2e      	ldr	r6, [pc, #184]	; (8006b48 <_malloc_r+0xe4>)
 8006a8e:	f000 f8d1 	bl	8006c34 <__malloc_lock>
 8006a92:	6833      	ldr	r3, [r6, #0]
 8006a94:	461c      	mov	r4, r3
 8006a96:	bb34      	cbnz	r4, 8006ae6 <_malloc_r+0x82>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff ffc2 	bl	8006a24 <sbrk_aligned>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	d14d      	bne.n	8006b42 <_malloc_r+0xde>
 8006aa6:	6834      	ldr	r4, [r6, #0]
 8006aa8:	4626      	mov	r6, r4
 8006aaa:	2e00      	cmp	r6, #0
 8006aac:	d140      	bne.n	8006b30 <_malloc_r+0xcc>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	eb04 0803 	add.w	r8, r4, r3
 8006ab8:	f000 f848 	bl	8006b4c <_sbrk_r>
 8006abc:	4580      	cmp	r8, r0
 8006abe:	d13a      	bne.n	8006b36 <_malloc_r+0xd2>
 8006ac0:	6821      	ldr	r1, [r4, #0]
 8006ac2:	3503      	adds	r5, #3
 8006ac4:	1a6d      	subs	r5, r5, r1
 8006ac6:	f025 0503 	bic.w	r5, r5, #3
 8006aca:	3508      	adds	r5, #8
 8006acc:	2d0c      	cmp	r5, #12
 8006ace:	bf38      	it	cc
 8006ad0:	250c      	movcc	r5, #12
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f7ff ffa5 	bl	8006a24 <sbrk_aligned>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d02b      	beq.n	8006b36 <_malloc_r+0xd2>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	442b      	add	r3, r5
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	e00e      	b.n	8006b04 <_malloc_r+0xa0>
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	1b52      	subs	r2, r2, r5
 8006aea:	d41e      	bmi.n	8006b2a <_malloc_r+0xc6>
 8006aec:	2a0b      	cmp	r2, #11
 8006aee:	d916      	bls.n	8006b1e <_malloc_r+0xba>
 8006af0:	1961      	adds	r1, r4, r5
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	bf18      	it	ne
 8006af8:	6059      	strne	r1, [r3, #4]
 8006afa:	6863      	ldr	r3, [r4, #4]
 8006afc:	bf08      	it	eq
 8006afe:	6031      	streq	r1, [r6, #0]
 8006b00:	5162      	str	r2, [r4, r5]
 8006b02:	604b      	str	r3, [r1, #4]
 8006b04:	4638      	mov	r0, r7
 8006b06:	f104 060b 	add.w	r6, r4, #11
 8006b0a:	f000 f899 	bl	8006c40 <__malloc_unlock>
 8006b0e:	f026 0607 	bic.w	r6, r6, #7
 8006b12:	1d23      	adds	r3, r4, #4
 8006b14:	1af2      	subs	r2, r6, r3
 8006b16:	d0b6      	beq.n	8006a86 <_malloc_r+0x22>
 8006b18:	1b9b      	subs	r3, r3, r6
 8006b1a:	50a3      	str	r3, [r4, r2]
 8006b1c:	e7b3      	b.n	8006a86 <_malloc_r+0x22>
 8006b1e:	6862      	ldr	r2, [r4, #4]
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	bf0c      	ite	eq
 8006b24:	6032      	streq	r2, [r6, #0]
 8006b26:	605a      	strne	r2, [r3, #4]
 8006b28:	e7ec      	b.n	8006b04 <_malloc_r+0xa0>
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	6864      	ldr	r4, [r4, #4]
 8006b2e:	e7b2      	b.n	8006a96 <_malloc_r+0x32>
 8006b30:	4634      	mov	r4, r6
 8006b32:	6876      	ldr	r6, [r6, #4]
 8006b34:	e7b9      	b.n	8006aaa <_malloc_r+0x46>
 8006b36:	230c      	movs	r3, #12
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	f000 f880 	bl	8006c40 <__malloc_unlock>
 8006b40:	e7a1      	b.n	8006a86 <_malloc_r+0x22>
 8006b42:	6025      	str	r5, [r4, #0]
 8006b44:	e7de      	b.n	8006b04 <_malloc_r+0xa0>
 8006b46:	bf00      	nop
 8006b48:	20000308 	.word	0x20000308

08006b4c <_sbrk_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d06      	ldr	r5, [pc, #24]	; (8006b68 <_sbrk_r+0x1c>)
 8006b50:	2300      	movs	r3, #0
 8006b52:	4604      	mov	r4, r0
 8006b54:	4608      	mov	r0, r1
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	f7fb f842 	bl	8001be0 <_sbrk>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_sbrk_r+0x1a>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_sbrk_r+0x1a>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	20000310 	.word	0x20000310

08006b6c <_raise_r>:
 8006b6c:	291f      	cmp	r1, #31
 8006b6e:	b538      	push	{r3, r4, r5, lr}
 8006b70:	4604      	mov	r4, r0
 8006b72:	460d      	mov	r5, r1
 8006b74:	d904      	bls.n	8006b80 <_raise_r+0x14>
 8006b76:	2316      	movs	r3, #22
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b82:	b112      	cbz	r2, 8006b8a <_raise_r+0x1e>
 8006b84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b88:	b94b      	cbnz	r3, 8006b9e <_raise_r+0x32>
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 f830 	bl	8006bf0 <_getpid_r>
 8006b90:	462a      	mov	r2, r5
 8006b92:	4601      	mov	r1, r0
 8006b94:	4620      	mov	r0, r4
 8006b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b9a:	f000 b817 	b.w	8006bcc <_kill_r>
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d00a      	beq.n	8006bb8 <_raise_r+0x4c>
 8006ba2:	1c59      	adds	r1, r3, #1
 8006ba4:	d103      	bne.n	8006bae <_raise_r+0x42>
 8006ba6:	2316      	movs	r3, #22
 8006ba8:	6003      	str	r3, [r0, #0]
 8006baa:	2001      	movs	r0, #1
 8006bac:	e7e7      	b.n	8006b7e <_raise_r+0x12>
 8006bae:	2400      	movs	r4, #0
 8006bb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	4798      	blx	r3
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e7e0      	b.n	8006b7e <_raise_r+0x12>

08006bbc <raise>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <raise+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f7ff bfd3 	b.w	8006b6c <_raise_r>
 8006bc6:	bf00      	nop
 8006bc8:	2000000c 	.word	0x2000000c

08006bcc <_kill_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d07      	ldr	r5, [pc, #28]	; (8006bec <_kill_r+0x20>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f7fa ffe7 	bl	8001bac <_kill>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d102      	bne.n	8006be8 <_kill_r+0x1c>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b103      	cbz	r3, 8006be8 <_kill_r+0x1c>
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	bd38      	pop	{r3, r4, r5, pc}
 8006bea:	bf00      	nop
 8006bec:	20000310 	.word	0x20000310

08006bf0 <_getpid_r>:
 8006bf0:	f7fa bfd4 	b.w	8001b9c <_getpid>

08006bf4 <siprintf>:
 8006bf4:	b40e      	push	{r1, r2, r3}
 8006bf6:	b500      	push	{lr}
 8006bf8:	b09c      	sub	sp, #112	; 0x70
 8006bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8006bfc:	9002      	str	r0, [sp, #8]
 8006bfe:	9006      	str	r0, [sp, #24]
 8006c00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c04:	4809      	ldr	r0, [pc, #36]	; (8006c2c <siprintf+0x38>)
 8006c06:	9107      	str	r1, [sp, #28]
 8006c08:	9104      	str	r1, [sp, #16]
 8006c0a:	4909      	ldr	r1, [pc, #36]	; (8006c30 <siprintf+0x3c>)
 8006c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c10:	9105      	str	r1, [sp, #20]
 8006c12:	6800      	ldr	r0, [r0, #0]
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	a902      	add	r1, sp, #8
 8006c18:	f000 f874 	bl	8006d04 <_svfiprintf_r>
 8006c1c:	9b02      	ldr	r3, [sp, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	b01c      	add	sp, #112	; 0x70
 8006c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c28:	b003      	add	sp, #12
 8006c2a:	4770      	bx	lr
 8006c2c:	2000000c 	.word	0x2000000c
 8006c30:	ffff0208 	.word	0xffff0208

08006c34 <__malloc_lock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__malloc_lock+0x8>)
 8006c36:	f000 baf9 	b.w	800722c <__retarget_lock_acquire_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000314 	.word	0x20000314

08006c40 <__malloc_unlock>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__malloc_unlock+0x8>)
 8006c42:	f000 baf4 	b.w	800722e <__retarget_lock_release_recursive>
 8006c46:	bf00      	nop
 8006c48:	20000314 	.word	0x20000314

08006c4c <__ssputs_r>:
 8006c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	688e      	ldr	r6, [r1, #8]
 8006c52:	429e      	cmp	r6, r3
 8006c54:	4682      	mov	sl, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	4690      	mov	r8, r2
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	d838      	bhi.n	8006cd0 <__ssputs_r+0x84>
 8006c5e:	898a      	ldrh	r2, [r1, #12]
 8006c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c64:	d032      	beq.n	8006ccc <__ssputs_r+0x80>
 8006c66:	6825      	ldr	r5, [r4, #0]
 8006c68:	6909      	ldr	r1, [r1, #16]
 8006c6a:	eba5 0901 	sub.w	r9, r5, r1
 8006c6e:	6965      	ldr	r5, [r4, #20]
 8006c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c78:	3301      	adds	r3, #1
 8006c7a:	444b      	add	r3, r9
 8006c7c:	106d      	asrs	r5, r5, #1
 8006c7e:	429d      	cmp	r5, r3
 8006c80:	bf38      	it	cc
 8006c82:	461d      	movcc	r5, r3
 8006c84:	0553      	lsls	r3, r2, #21
 8006c86:	d531      	bpl.n	8006cec <__ssputs_r+0xa0>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7ff feeb 	bl	8006a64 <_malloc_r>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	b950      	cbnz	r0, 8006ca8 <__ssputs_r+0x5c>
 8006c92:	230c      	movs	r3, #12
 8006c94:	f8ca 3000 	str.w	r3, [sl]
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca8:	6921      	ldr	r1, [r4, #16]
 8006caa:	464a      	mov	r2, r9
 8006cac:	f000 fac0 	bl	8007230 <memcpy>
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	6126      	str	r6, [r4, #16]
 8006cbe:	6165      	str	r5, [r4, #20]
 8006cc0:	444e      	add	r6, r9
 8006cc2:	eba5 0509 	sub.w	r5, r5, r9
 8006cc6:	6026      	str	r6, [r4, #0]
 8006cc8:	60a5      	str	r5, [r4, #8]
 8006cca:	463e      	mov	r6, r7
 8006ccc:	42be      	cmp	r6, r7
 8006cce:	d900      	bls.n	8006cd2 <__ssputs_r+0x86>
 8006cd0:	463e      	mov	r6, r7
 8006cd2:	6820      	ldr	r0, [r4, #0]
 8006cd4:	4632      	mov	r2, r6
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	f000 fab8 	bl	800724c <memmove>
 8006cdc:	68a3      	ldr	r3, [r4, #8]
 8006cde:	1b9b      	subs	r3, r3, r6
 8006ce0:	60a3      	str	r3, [r4, #8]
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	4433      	add	r3, r6
 8006ce6:	6023      	str	r3, [r4, #0]
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e7db      	b.n	8006ca4 <__ssputs_r+0x58>
 8006cec:	462a      	mov	r2, r5
 8006cee:	f000 fac7 	bl	8007280 <_realloc_r>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d1e1      	bne.n	8006cbc <__ssputs_r+0x70>
 8006cf8:	6921      	ldr	r1, [r4, #16]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7ff fe46 	bl	800698c <_free_r>
 8006d00:	e7c7      	b.n	8006c92 <__ssputs_r+0x46>
	...

08006d04 <_svfiprintf_r>:
 8006d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d08:	4698      	mov	r8, r3
 8006d0a:	898b      	ldrh	r3, [r1, #12]
 8006d0c:	061b      	lsls	r3, r3, #24
 8006d0e:	b09d      	sub	sp, #116	; 0x74
 8006d10:	4607      	mov	r7, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	4614      	mov	r4, r2
 8006d16:	d50e      	bpl.n	8006d36 <_svfiprintf_r+0x32>
 8006d18:	690b      	ldr	r3, [r1, #16]
 8006d1a:	b963      	cbnz	r3, 8006d36 <_svfiprintf_r+0x32>
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	f7ff fea1 	bl	8006a64 <_malloc_r>
 8006d22:	6028      	str	r0, [r5, #0]
 8006d24:	6128      	str	r0, [r5, #16]
 8006d26:	b920      	cbnz	r0, 8006d32 <_svfiprintf_r+0x2e>
 8006d28:	230c      	movs	r3, #12
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	e0d1      	b.n	8006ed6 <_svfiprintf_r+0x1d2>
 8006d32:	2340      	movs	r3, #64	; 0x40
 8006d34:	616b      	str	r3, [r5, #20]
 8006d36:	2300      	movs	r3, #0
 8006d38:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3a:	2320      	movs	r3, #32
 8006d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d44:	2330      	movs	r3, #48	; 0x30
 8006d46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ef0 <_svfiprintf_r+0x1ec>
 8006d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d4e:	f04f 0901 	mov.w	r9, #1
 8006d52:	4623      	mov	r3, r4
 8006d54:	469a      	mov	sl, r3
 8006d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d5a:	b10a      	cbz	r2, 8006d60 <_svfiprintf_r+0x5c>
 8006d5c:	2a25      	cmp	r2, #37	; 0x25
 8006d5e:	d1f9      	bne.n	8006d54 <_svfiprintf_r+0x50>
 8006d60:	ebba 0b04 	subs.w	fp, sl, r4
 8006d64:	d00b      	beq.n	8006d7e <_svfiprintf_r+0x7a>
 8006d66:	465b      	mov	r3, fp
 8006d68:	4622      	mov	r2, r4
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f7ff ff6d 	bl	8006c4c <__ssputs_r>
 8006d72:	3001      	adds	r0, #1
 8006d74:	f000 80aa 	beq.w	8006ecc <_svfiprintf_r+0x1c8>
 8006d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d7a:	445a      	add	r2, fp
 8006d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 80a2 	beq.w	8006ecc <_svfiprintf_r+0x1c8>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d92:	f10a 0a01 	add.w	sl, sl, #1
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	9307      	str	r3, [sp, #28]
 8006d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8006da0:	4654      	mov	r4, sl
 8006da2:	2205      	movs	r2, #5
 8006da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da8:	4851      	ldr	r0, [pc, #324]	; (8006ef0 <_svfiprintf_r+0x1ec>)
 8006daa:	f7f9 fa19 	bl	80001e0 <memchr>
 8006dae:	9a04      	ldr	r2, [sp, #16]
 8006db0:	b9d8      	cbnz	r0, 8006dea <_svfiprintf_r+0xe6>
 8006db2:	06d0      	lsls	r0, r2, #27
 8006db4:	bf44      	itt	mi
 8006db6:	2320      	movmi	r3, #32
 8006db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dbc:	0711      	lsls	r1, r2, #28
 8006dbe:	bf44      	itt	mi
 8006dc0:	232b      	movmi	r3, #43	; 0x2b
 8006dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dca:	2b2a      	cmp	r3, #42	; 0x2a
 8006dcc:	d015      	beq.n	8006dfa <_svfiprintf_r+0xf6>
 8006dce:	9a07      	ldr	r2, [sp, #28]
 8006dd0:	4654      	mov	r4, sl
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f04f 0c0a 	mov.w	ip, #10
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dde:	3b30      	subs	r3, #48	; 0x30
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	d94e      	bls.n	8006e82 <_svfiprintf_r+0x17e>
 8006de4:	b1b0      	cbz	r0, 8006e14 <_svfiprintf_r+0x110>
 8006de6:	9207      	str	r2, [sp, #28]
 8006de8:	e014      	b.n	8006e14 <_svfiprintf_r+0x110>
 8006dea:	eba0 0308 	sub.w	r3, r0, r8
 8006dee:	fa09 f303 	lsl.w	r3, r9, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	46a2      	mov	sl, r4
 8006df8:	e7d2      	b.n	8006da0 <_svfiprintf_r+0x9c>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	1d19      	adds	r1, r3, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	9103      	str	r1, [sp, #12]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bfbb      	ittet	lt
 8006e06:	425b      	neglt	r3, r3
 8006e08:	f042 0202 	orrlt.w	r2, r2, #2
 8006e0c:	9307      	strge	r3, [sp, #28]
 8006e0e:	9307      	strlt	r3, [sp, #28]
 8006e10:	bfb8      	it	lt
 8006e12:	9204      	strlt	r2, [sp, #16]
 8006e14:	7823      	ldrb	r3, [r4, #0]
 8006e16:	2b2e      	cmp	r3, #46	; 0x2e
 8006e18:	d10c      	bne.n	8006e34 <_svfiprintf_r+0x130>
 8006e1a:	7863      	ldrb	r3, [r4, #1]
 8006e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e1e:	d135      	bne.n	8006e8c <_svfiprintf_r+0x188>
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	9203      	str	r2, [sp, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bfb8      	it	lt
 8006e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e30:	3402      	adds	r4, #2
 8006e32:	9305      	str	r3, [sp, #20]
 8006e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f00 <_svfiprintf_r+0x1fc>
 8006e38:	7821      	ldrb	r1, [r4, #0]
 8006e3a:	2203      	movs	r2, #3
 8006e3c:	4650      	mov	r0, sl
 8006e3e:	f7f9 f9cf 	bl	80001e0 <memchr>
 8006e42:	b140      	cbz	r0, 8006e56 <_svfiprintf_r+0x152>
 8006e44:	2340      	movs	r3, #64	; 0x40
 8006e46:	eba0 000a 	sub.w	r0, r0, sl
 8006e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	4303      	orrs	r3, r0
 8006e52:	3401      	adds	r4, #1
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e5a:	4826      	ldr	r0, [pc, #152]	; (8006ef4 <_svfiprintf_r+0x1f0>)
 8006e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e60:	2206      	movs	r2, #6
 8006e62:	f7f9 f9bd 	bl	80001e0 <memchr>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d038      	beq.n	8006edc <_svfiprintf_r+0x1d8>
 8006e6a:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <_svfiprintf_r+0x1f4>)
 8006e6c:	bb1b      	cbnz	r3, 8006eb6 <_svfiprintf_r+0x1b2>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	3307      	adds	r3, #7
 8006e72:	f023 0307 	bic.w	r3, r3, #7
 8006e76:	3308      	adds	r3, #8
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7c:	4433      	add	r3, r6
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	e767      	b.n	8006d52 <_svfiprintf_r+0x4e>
 8006e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e86:	460c      	mov	r4, r1
 8006e88:	2001      	movs	r0, #1
 8006e8a:	e7a5      	b.n	8006dd8 <_svfiprintf_r+0xd4>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	3401      	adds	r4, #1
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	4619      	mov	r1, r3
 8006e94:	f04f 0c0a 	mov.w	ip, #10
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e9e:	3a30      	subs	r2, #48	; 0x30
 8006ea0:	2a09      	cmp	r2, #9
 8006ea2:	d903      	bls.n	8006eac <_svfiprintf_r+0x1a8>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d0c5      	beq.n	8006e34 <_svfiprintf_r+0x130>
 8006ea8:	9105      	str	r1, [sp, #20]
 8006eaa:	e7c3      	b.n	8006e34 <_svfiprintf_r+0x130>
 8006eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e7f0      	b.n	8006e98 <_svfiprintf_r+0x194>
 8006eb6:	ab03      	add	r3, sp, #12
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <_svfiprintf_r+0x1f8>)
 8006ebe:	a904      	add	r1, sp, #16
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f3af 8000 	nop.w
 8006ec6:	1c42      	adds	r2, r0, #1
 8006ec8:	4606      	mov	r6, r0
 8006eca:	d1d6      	bne.n	8006e7a <_svfiprintf_r+0x176>
 8006ecc:	89ab      	ldrh	r3, [r5, #12]
 8006ece:	065b      	lsls	r3, r3, #25
 8006ed0:	f53f af2c 	bmi.w	8006d2c <_svfiprintf_r+0x28>
 8006ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ed6:	b01d      	add	sp, #116	; 0x74
 8006ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006edc:	ab03      	add	r3, sp, #12
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <_svfiprintf_r+0x1f8>)
 8006ee4:	a904      	add	r1, sp, #16
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f000 f87a 	bl	8006fe0 <_printf_i>
 8006eec:	e7eb      	b.n	8006ec6 <_svfiprintf_r+0x1c2>
 8006eee:	bf00      	nop
 8006ef0:	08007374 	.word	0x08007374
 8006ef4:	0800737e 	.word	0x0800737e
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	08006c4d 	.word	0x08006c4d
 8006f00:	0800737a 	.word	0x0800737a

08006f04 <_printf_common>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	4616      	mov	r6, r2
 8006f0a:	4699      	mov	r9, r3
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	bfb8      	it	lt
 8006f18:	4613      	movlt	r3, r2
 8006f1a:	6033      	str	r3, [r6, #0]
 8006f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f20:	4607      	mov	r7, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	b10a      	cbz	r2, 8006f2a <_printf_common+0x26>
 8006f26:	3301      	adds	r3, #1
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	0699      	lsls	r1, r3, #26
 8006f2e:	bf42      	ittt	mi
 8006f30:	6833      	ldrmi	r3, [r6, #0]
 8006f32:	3302      	addmi	r3, #2
 8006f34:	6033      	strmi	r3, [r6, #0]
 8006f36:	6825      	ldr	r5, [r4, #0]
 8006f38:	f015 0506 	ands.w	r5, r5, #6
 8006f3c:	d106      	bne.n	8006f4c <_printf_common+0x48>
 8006f3e:	f104 0a19 	add.w	sl, r4, #25
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	6832      	ldr	r2, [r6, #0]
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	dc26      	bgt.n	8006f9a <_printf_common+0x96>
 8006f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f50:	1e13      	subs	r3, r2, #0
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	bf18      	it	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	0692      	lsls	r2, r2, #26
 8006f5a:	d42b      	bmi.n	8006fb4 <_printf_common+0xb0>
 8006f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f60:	4649      	mov	r1, r9
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c0      	blx	r8
 8006f66:	3001      	adds	r0, #1
 8006f68:	d01e      	beq.n	8006fa8 <_printf_common+0xa4>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	68e5      	ldr	r5, [r4, #12]
 8006f6e:	6832      	ldr	r2, [r6, #0]
 8006f70:	f003 0306 	and.w	r3, r3, #6
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	bf08      	it	eq
 8006f78:	1aad      	subeq	r5, r5, r2
 8006f7a:	68a3      	ldr	r3, [r4, #8]
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	bf0c      	ite	eq
 8006f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f84:	2500      	movne	r5, #0
 8006f86:	4293      	cmp	r3, r2
 8006f88:	bfc4      	itt	gt
 8006f8a:	1a9b      	subgt	r3, r3, r2
 8006f8c:	18ed      	addgt	r5, r5, r3
 8006f8e:	2600      	movs	r6, #0
 8006f90:	341a      	adds	r4, #26
 8006f92:	42b5      	cmp	r5, r6
 8006f94:	d11a      	bne.n	8006fcc <_printf_common+0xc8>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e008      	b.n	8006fac <_printf_common+0xa8>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	47c0      	blx	r8
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d103      	bne.n	8006fb0 <_printf_common+0xac>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	e7c6      	b.n	8006f42 <_printf_common+0x3e>
 8006fb4:	18e1      	adds	r1, r4, r3
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	2030      	movs	r0, #48	; 0x30
 8006fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fbe:	4422      	add	r2, r4
 8006fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fc8:	3302      	adds	r3, #2
 8006fca:	e7c7      	b.n	8006f5c <_printf_common+0x58>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4622      	mov	r2, r4
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	47c0      	blx	r8
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d0e6      	beq.n	8006fa8 <_printf_common+0xa4>
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7d9      	b.n	8006f92 <_printf_common+0x8e>
	...

08006fe0 <_printf_i>:
 8006fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	7e0f      	ldrb	r7, [r1, #24]
 8006fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fe8:	2f78      	cmp	r7, #120	; 0x78
 8006fea:	4691      	mov	r9, r2
 8006fec:	4680      	mov	r8, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ff6:	d807      	bhi.n	8007008 <_printf_i+0x28>
 8006ff8:	2f62      	cmp	r7, #98	; 0x62
 8006ffa:	d80a      	bhi.n	8007012 <_printf_i+0x32>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	f000 80d8 	beq.w	80071b2 <_printf_i+0x1d2>
 8007002:	2f58      	cmp	r7, #88	; 0x58
 8007004:	f000 80a3 	beq.w	800714e <_printf_i+0x16e>
 8007008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800700c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007010:	e03a      	b.n	8007088 <_printf_i+0xa8>
 8007012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007016:	2b15      	cmp	r3, #21
 8007018:	d8f6      	bhi.n	8007008 <_printf_i+0x28>
 800701a:	a101      	add	r1, pc, #4	; (adr r1, 8007020 <_printf_i+0x40>)
 800701c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007020:	08007079 	.word	0x08007079
 8007024:	0800708d 	.word	0x0800708d
 8007028:	08007009 	.word	0x08007009
 800702c:	08007009 	.word	0x08007009
 8007030:	08007009 	.word	0x08007009
 8007034:	08007009 	.word	0x08007009
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007009 	.word	0x08007009
 8007040:	08007009 	.word	0x08007009
 8007044:	08007009 	.word	0x08007009
 8007048:	08007009 	.word	0x08007009
 800704c:	08007199 	.word	0x08007199
 8007050:	080070bd 	.word	0x080070bd
 8007054:	0800717b 	.word	0x0800717b
 8007058:	08007009 	.word	0x08007009
 800705c:	08007009 	.word	0x08007009
 8007060:	080071bb 	.word	0x080071bb
 8007064:	08007009 	.word	0x08007009
 8007068:	080070bd 	.word	0x080070bd
 800706c:	08007009 	.word	0x08007009
 8007070:	08007009 	.word	0x08007009
 8007074:	08007183 	.word	0x08007183
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	602a      	str	r2, [r5, #0]
 8007080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007088:	2301      	movs	r3, #1
 800708a:	e0a3      	b.n	80071d4 <_printf_i+0x1f4>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	6829      	ldr	r1, [r5, #0]
 8007090:	0606      	lsls	r6, r0, #24
 8007092:	f101 0304 	add.w	r3, r1, #4
 8007096:	d50a      	bpl.n	80070ae <_printf_i+0xce>
 8007098:	680e      	ldr	r6, [r1, #0]
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	2e00      	cmp	r6, #0
 800709e:	da03      	bge.n	80070a8 <_printf_i+0xc8>
 80070a0:	232d      	movs	r3, #45	; 0x2d
 80070a2:	4276      	negs	r6, r6
 80070a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a8:	485e      	ldr	r0, [pc, #376]	; (8007224 <_printf_i+0x244>)
 80070aa:	230a      	movs	r3, #10
 80070ac:	e019      	b.n	80070e2 <_printf_i+0x102>
 80070ae:	680e      	ldr	r6, [r1, #0]
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070b6:	bf18      	it	ne
 80070b8:	b236      	sxthne	r6, r6
 80070ba:	e7ef      	b.n	800709c <_printf_i+0xbc>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	6029      	str	r1, [r5, #0]
 80070c4:	0601      	lsls	r1, r0, #24
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0xec>
 80070c8:	681e      	ldr	r6, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <_printf_i+0xf2>
 80070cc:	0646      	lsls	r6, r0, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0xe8>
 80070d0:	881e      	ldrh	r6, [r3, #0]
 80070d2:	4854      	ldr	r0, [pc, #336]	; (8007224 <_printf_i+0x244>)
 80070d4:	2f6f      	cmp	r7, #111	; 0x6f
 80070d6:	bf0c      	ite	eq
 80070d8:	2308      	moveq	r3, #8
 80070da:	230a      	movne	r3, #10
 80070dc:	2100      	movs	r1, #0
 80070de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070e2:	6865      	ldr	r5, [r4, #4]
 80070e4:	60a5      	str	r5, [r4, #8]
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	bfa2      	ittt	ge
 80070ea:	6821      	ldrge	r1, [r4, #0]
 80070ec:	f021 0104 	bicge.w	r1, r1, #4
 80070f0:	6021      	strge	r1, [r4, #0]
 80070f2:	b90e      	cbnz	r6, 80070f8 <_printf_i+0x118>
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	d04d      	beq.n	8007194 <_printf_i+0x1b4>
 80070f8:	4615      	mov	r5, r2
 80070fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80070fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007102:	5dc7      	ldrb	r7, [r0, r7]
 8007104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007108:	4637      	mov	r7, r6
 800710a:	42bb      	cmp	r3, r7
 800710c:	460e      	mov	r6, r1
 800710e:	d9f4      	bls.n	80070fa <_printf_i+0x11a>
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10b      	bne.n	800712c <_printf_i+0x14c>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	07de      	lsls	r6, r3, #31
 8007118:	d508      	bpl.n	800712c <_printf_i+0x14c>
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	6861      	ldr	r1, [r4, #4]
 800711e:	4299      	cmp	r1, r3
 8007120:	bfde      	ittt	le
 8007122:	2330      	movle	r3, #48	; 0x30
 8007124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800712c:	1b52      	subs	r2, r2, r5
 800712e:	6122      	str	r2, [r4, #16]
 8007130:	f8cd a000 	str.w	sl, [sp]
 8007134:	464b      	mov	r3, r9
 8007136:	aa03      	add	r2, sp, #12
 8007138:	4621      	mov	r1, r4
 800713a:	4640      	mov	r0, r8
 800713c:	f7ff fee2 	bl	8006f04 <_printf_common>
 8007140:	3001      	adds	r0, #1
 8007142:	d14c      	bne.n	80071de <_printf_i+0x1fe>
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	b004      	add	sp, #16
 800714a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714e:	4835      	ldr	r0, [pc, #212]	; (8007224 <_printf_i+0x244>)
 8007150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007154:	6829      	ldr	r1, [r5, #0]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	f851 6b04 	ldr.w	r6, [r1], #4
 800715c:	6029      	str	r1, [r5, #0]
 800715e:	061d      	lsls	r5, r3, #24
 8007160:	d514      	bpl.n	800718c <_printf_i+0x1ac>
 8007162:	07df      	lsls	r7, r3, #31
 8007164:	bf44      	itt	mi
 8007166:	f043 0320 	orrmi.w	r3, r3, #32
 800716a:	6023      	strmi	r3, [r4, #0]
 800716c:	b91e      	cbnz	r6, 8007176 <_printf_i+0x196>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f023 0320 	bic.w	r3, r3, #32
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	2310      	movs	r3, #16
 8007178:	e7b0      	b.n	80070dc <_printf_i+0xfc>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f043 0320 	orr.w	r3, r3, #32
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	2378      	movs	r3, #120	; 0x78
 8007184:	4828      	ldr	r0, [pc, #160]	; (8007228 <_printf_i+0x248>)
 8007186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800718a:	e7e3      	b.n	8007154 <_printf_i+0x174>
 800718c:	0659      	lsls	r1, r3, #25
 800718e:	bf48      	it	mi
 8007190:	b2b6      	uxthmi	r6, r6
 8007192:	e7e6      	b.n	8007162 <_printf_i+0x182>
 8007194:	4615      	mov	r5, r2
 8007196:	e7bb      	b.n	8007110 <_printf_i+0x130>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6826      	ldr	r6, [r4, #0]
 800719c:	6961      	ldr	r1, [r4, #20]
 800719e:	1d18      	adds	r0, r3, #4
 80071a0:	6028      	str	r0, [r5, #0]
 80071a2:	0635      	lsls	r5, r6, #24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0x1cc>
 80071a8:	6019      	str	r1, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <_printf_i+0x1d2>
 80071ac:	0670      	lsls	r0, r6, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0x1c8>
 80071b0:	8019      	strh	r1, [r3, #0]
 80071b2:	2300      	movs	r3, #0
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	4615      	mov	r5, r2
 80071b8:	e7ba      	b.n	8007130 <_printf_i+0x150>
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	1d1a      	adds	r2, r3, #4
 80071be:	602a      	str	r2, [r5, #0]
 80071c0:	681d      	ldr	r5, [r3, #0]
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	2100      	movs	r1, #0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7f9 f80a 	bl	80001e0 <memchr>
 80071cc:	b108      	cbz	r0, 80071d2 <_printf_i+0x1f2>
 80071ce:	1b40      	subs	r0, r0, r5
 80071d0:	6060      	str	r0, [r4, #4]
 80071d2:	6863      	ldr	r3, [r4, #4]
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	2300      	movs	r3, #0
 80071d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071dc:	e7a8      	b.n	8007130 <_printf_i+0x150>
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4649      	mov	r1, r9
 80071e4:	4640      	mov	r0, r8
 80071e6:	47d0      	blx	sl
 80071e8:	3001      	adds	r0, #1
 80071ea:	d0ab      	beq.n	8007144 <_printf_i+0x164>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	079b      	lsls	r3, r3, #30
 80071f0:	d413      	bmi.n	800721a <_printf_i+0x23a>
 80071f2:	68e0      	ldr	r0, [r4, #12]
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	4298      	cmp	r0, r3
 80071f8:	bfb8      	it	lt
 80071fa:	4618      	movlt	r0, r3
 80071fc:	e7a4      	b.n	8007148 <_printf_i+0x168>
 80071fe:	2301      	movs	r3, #1
 8007200:	4632      	mov	r2, r6
 8007202:	4649      	mov	r1, r9
 8007204:	4640      	mov	r0, r8
 8007206:	47d0      	blx	sl
 8007208:	3001      	adds	r0, #1
 800720a:	d09b      	beq.n	8007144 <_printf_i+0x164>
 800720c:	3501      	adds	r5, #1
 800720e:	68e3      	ldr	r3, [r4, #12]
 8007210:	9903      	ldr	r1, [sp, #12]
 8007212:	1a5b      	subs	r3, r3, r1
 8007214:	42ab      	cmp	r3, r5
 8007216:	dcf2      	bgt.n	80071fe <_printf_i+0x21e>
 8007218:	e7eb      	b.n	80071f2 <_printf_i+0x212>
 800721a:	2500      	movs	r5, #0
 800721c:	f104 0619 	add.w	r6, r4, #25
 8007220:	e7f5      	b.n	800720e <_printf_i+0x22e>
 8007222:	bf00      	nop
 8007224:	08007385 	.word	0x08007385
 8007228:	08007396 	.word	0x08007396

0800722c <__retarget_lock_acquire_recursive>:
 800722c:	4770      	bx	lr

0800722e <__retarget_lock_release_recursive>:
 800722e:	4770      	bx	lr

08007230 <memcpy>:
 8007230:	440a      	add	r2, r1
 8007232:	4291      	cmp	r1, r2
 8007234:	f100 33ff 	add.w	r3, r0, #4294967295
 8007238:	d100      	bne.n	800723c <memcpy+0xc>
 800723a:	4770      	bx	lr
 800723c:	b510      	push	{r4, lr}
 800723e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007246:	4291      	cmp	r1, r2
 8007248:	d1f9      	bne.n	800723e <memcpy+0xe>
 800724a:	bd10      	pop	{r4, pc}

0800724c <memmove>:
 800724c:	4288      	cmp	r0, r1
 800724e:	b510      	push	{r4, lr}
 8007250:	eb01 0402 	add.w	r4, r1, r2
 8007254:	d902      	bls.n	800725c <memmove+0x10>
 8007256:	4284      	cmp	r4, r0
 8007258:	4623      	mov	r3, r4
 800725a:	d807      	bhi.n	800726c <memmove+0x20>
 800725c:	1e43      	subs	r3, r0, #1
 800725e:	42a1      	cmp	r1, r4
 8007260:	d008      	beq.n	8007274 <memmove+0x28>
 8007262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800726a:	e7f8      	b.n	800725e <memmove+0x12>
 800726c:	4402      	add	r2, r0
 800726e:	4601      	mov	r1, r0
 8007270:	428a      	cmp	r2, r1
 8007272:	d100      	bne.n	8007276 <memmove+0x2a>
 8007274:	bd10      	pop	{r4, pc}
 8007276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800727a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800727e:	e7f7      	b.n	8007270 <memmove+0x24>

08007280 <_realloc_r>:
 8007280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007284:	4680      	mov	r8, r0
 8007286:	4614      	mov	r4, r2
 8007288:	460e      	mov	r6, r1
 800728a:	b921      	cbnz	r1, 8007296 <_realloc_r+0x16>
 800728c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007290:	4611      	mov	r1, r2
 8007292:	f7ff bbe7 	b.w	8006a64 <_malloc_r>
 8007296:	b92a      	cbnz	r2, 80072a4 <_realloc_r+0x24>
 8007298:	f7ff fb78 	bl	800698c <_free_r>
 800729c:	4625      	mov	r5, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a4:	f000 f81b 	bl	80072de <_malloc_usable_size_r>
 80072a8:	4284      	cmp	r4, r0
 80072aa:	4607      	mov	r7, r0
 80072ac:	d802      	bhi.n	80072b4 <_realloc_r+0x34>
 80072ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072b2:	d812      	bhi.n	80072da <_realloc_r+0x5a>
 80072b4:	4621      	mov	r1, r4
 80072b6:	4640      	mov	r0, r8
 80072b8:	f7ff fbd4 	bl	8006a64 <_malloc_r>
 80072bc:	4605      	mov	r5, r0
 80072be:	2800      	cmp	r0, #0
 80072c0:	d0ed      	beq.n	800729e <_realloc_r+0x1e>
 80072c2:	42bc      	cmp	r4, r7
 80072c4:	4622      	mov	r2, r4
 80072c6:	4631      	mov	r1, r6
 80072c8:	bf28      	it	cs
 80072ca:	463a      	movcs	r2, r7
 80072cc:	f7ff ffb0 	bl	8007230 <memcpy>
 80072d0:	4631      	mov	r1, r6
 80072d2:	4640      	mov	r0, r8
 80072d4:	f7ff fb5a 	bl	800698c <_free_r>
 80072d8:	e7e1      	b.n	800729e <_realloc_r+0x1e>
 80072da:	4635      	mov	r5, r6
 80072dc:	e7df      	b.n	800729e <_realloc_r+0x1e>

080072de <_malloc_usable_size_r>:
 80072de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e2:	1f18      	subs	r0, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfbc      	itt	lt
 80072e8:	580b      	ldrlt	r3, [r1, r0]
 80072ea:	18c0      	addlt	r0, r0, r3
 80072ec:	4770      	bx	lr
	...

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
